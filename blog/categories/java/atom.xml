<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Open Tech Pub]]></title>
  <link href="http://wodis.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://wodis.github.io/"/>
  <updated>2015-09-06T19:28:04+08:00</updated>
  <id>http://wodis.github.io/</id>
  <author>
    <name><![CDATA[Wu Di]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JVM工作原理摘要]]></title>
    <link href="http://wodis.github.io/blog/2015/07/20/jvm-zhai-yao/"/>
    <updated>2015-07-20T16:34:57+08:00</updated>
    <id>http://wodis.github.io/blog/2015/07/20/jvm-zhai-yao</id>
    <content type="html"><![CDATA[<h1>一、JVM的生命周期</h1>

<p>1.JVM实例对应了一个独立运行的java程序它是进程级别</p>

<p>a)启动。启动一个Java程序时，一个JVM实例就产生了，任何一个拥有public static void main(String[] args)函数的class都可以作为JVM实例运行的起点</p>

<p>b)运行。main()作为该程序初始线程的起点，任何其他线程均由该线程启动。JVM内部有两种线程：守护线程和非守护线程，main()属于非守护线程，守护线程通常由JVM自己使用，java程序也可以标明自己创建的线程是守护线程</p>

<p>c)消亡。当程序中的所有非守护线程都终止时，JVM才退出；若安全管理器允许，程序也可以使用Runtime类或者System.exit()来退出</p>

<p>2.JVM执行引擎实例则对应了属于用户运行程序的线程它是线程级别的</p>

<h1>二、JVM的体系结构</h1>

<p>1.类装载器（ClassLoader）（用来装载.class文件）</p>

<p>2.执行引擎（执行字节码，或者执行本地方法）</p>

<p>3.运行时数据区（方法区、堆、java栈、PC寄存器、本地方法栈）</p>

<h1>三、JVM类加载器</h1>

<h2>JVM整个类加载过程的步骤：</h2>

<h3>1.装载</h3>

<p>装载过程负责找到二进制字节码并加载至JVM中，JVM通过类名、类所在的包名通过ClassLoader来完成类的加载，
同样，也采用以上三个元素来标识一个被加载了的类：类名+包名+ClassLoader实例ID。</p>

<h3>2.链接</h3>

<p>链接过程负责对二进制字节码的格式进行校验、初始化装载类中的静态变量以及解析类中调用的接口、类。</p>

<p>完成校验后，JVM初始化类中的静态变量，并将其值赋为默认值。</p>

<p>最后对类中的所有属性、方法进行验证，以确保其需要调用的属性、方法存在，以及具备应的权限（例如public、private域权限等），会造成NoSuchMethodError、NoSuchFieldError等错误信息。</p>

<h3>3.初始化</h3>

<p>初始化过程即为执行类中的静态初始化代码、构造器代码以及静态属性的初始化，在四种情况下初始化过程会被触发执行：</p>

<p>调用了new；</p>

<p>反射调用了类中的方法；</p>

<p>子类调用了初始化；</p>

<p>JVM启动过程中指定的初始化类。</p>

<p>JVM类加载顺序：</p>

<p>JVM两种类装载器包括：启动类装载器和用户自定义类装载器。</p>

<p>启动类装载器是JVM实现的一部分；</p>

<p>用户自定义类装载器则是Java程序的一部分，必须是ClassLoader类的子类。</p>

<h3>JVM装载顺序：</h3>

<p>Jvm启动时，由Bootstrap向User-Defined方向加载类；</p>

<p>应用进行ClassLoader时，由User-Defined向Bootstrap方向查找并加载类；</p>

<p>1.Bootstrap ClassLoader</p>

<p>这是JVM的根ClassLoader，它是用C++实现的，JVM启动时初始化此ClassLoader，并由此ClassLoader完成$JAVA_HOME中jre/lib/rt.jar（Sun JDK的实现）中所有class文件的加载，这个jar中包含了java规范定义的所有接口以及实现。</p>

<p>2.Extension ClassLoader</p>

<p>JVM用此classloader来加载扩展功能的一些jar包。</p>

<p>3.System ClassLoader</p>

<p>JVM用此classloader来加载启动参数中指定的Classpath中的jar包以及目录，在Sun JDK中ClassLoader对应的类名为AppClassLoader。</p>

<p>4.User-Defined ClassLoader</p>

<p>User-DefinedClassLoader是Java开发人员继承ClassLoader抽象类自行实现的ClassLoader，基于自定义的ClassLoader可用于加载非Classpath中的jar以及目录。</p>

<h3>ClassLoader抽象类的几个关键方法：</h3>

<p>（1）loadClass</p>

<p>此方法负责加载指定名字的类，ClassLoader的实现方法为先从已经加载的类中寻找，如没有则继续从parent ClassLoader中寻找，如仍然没找到，则从System ClassLoader中寻找，最后再调用findClass方法来寻找，如要改变类的加载顺序，则可覆盖此方法</p>

<p>（2）findLoadedClass</p>

<p>此方法负责从当前ClassLoader实例对象的缓存中寻找已加载的类，调用的为native的方法。</p>

<p>（3）findClass</p>

<p>此方法直接抛出ClassNotFoundException，因此需要通过覆盖loadClass或此方法来以自定义的方式加载相应的类。</p>

<p>（4）findSystemClass</p>

<p>此方法负责从System ClassLoader中寻找类，如未找到，则继续从Bootstrap ClassLoader中寻找，如仍然为找到，则返回null。</p>

<p>（5）defineClass</p>

<p>此方法负责将二进制的字节码转换为Class对象</p>

<p>（6）resolveClass</p>

<p>此方法负责完成Class对象的链接，如已链接过，则会直接返回。</p>

<h1>四、JVM执行引擎</h1>

<h3>在执行方法时JVM提供了四种指令来执行：</h3>

<ol>
<li><p>invokestatic：调用类的static方法</p></li>
<li><p>invokevirtual：调用对象实例的方法</p></li>
<li><p>invokeinterface：将属性定义为接口来进行调用</p></li>
<li><p>invokespecial：JVM对于初始化对象（Java构造器的方法为：<init>）以及调用对象实例中的私有方法时。</p></li>
</ol>


<h3>主要的执行技术有:</h3>

<p>解释，即时编译，自适应优化、芯片级直接执行</p>

<ol>
<li><p>解释属于第一代JVM，</p></li>
<li><p>即时编译JIT属于第二代JVM，</p></li>
<li><p>自适应优化（目前Sun的HotspotJVM采用这种技术）则吸取第一代JVM和第二代</p></li>
</ol>


<p>JVM的经验，采用两者结合的方式</p>

<p>开始对所有的代码都采取解释执行的方式，并监视代码执行情况，然后对那些经常调用的方法启动一个后台线程，将其编译为本地代码，并进行优化。若方法不再频繁使用，则取消编译过的代码，仍对其进行解释执行。</p>

<h1>五、JVM运行时数据区</h1>

<h2>第一块：PC寄存器</h2>

<p>PC寄存器是用于存储每个线程下一步将执行的JVM指令，如该方法为native的，则PC寄存器中不存储任何信息。</p>

<h2>第二块：JVM栈</h2>

<p>JVM栈是线程私有的，每个线程创建的同时都会创建JVM栈，JVM栈中存放的为当前线程中局部基本类型的变量（java中定义的八种基本类型：boolean、char、byte、short、int、long、float、double）、部分的返回结果以及Stack Frame，非基本类型的对象在JVM栈上仅存放一个指向堆上的地址</p>

<h2>第三块：堆（Heap）</h2>

<p>它是JVM用来存储对象实例以及数组值的区域，可以认为Java中所有通过new创建的对象的内存都在此分配，Heap中的对象的内存需要等待GC进行回收。</p>

<ol>
<li><p>堆是JVM中所有线程共享的，因此在其上进行对象内存的分配均需要进行加锁，这也导致了new对象的开销是比较大的</p></li>
<li><p>Sun Hotspot JVM为了提升对象内存分配的效率，对于所创建的线程都会分配一块独立的空间TLAB（Thread Local Allocation Buffer），其大小由JVM根据运行的情况计算而得，在TLAB上分配对象时不需要加锁，因此JVM在给线程的对象分配内存时会尽量的在TLAB上分配，在这种情况下JVM中分配对象内存的性能和C基本是一样高效的，但如果对象过大的话则仍然是直接使用堆空间分配</p></li>
<li><p>TLAB仅作用于新生代的Eden Space，因此在编写Java程序时，通常多个小的对象比大的对象分配起来更加高效。</p></li>
</ol>


<h2>第四块：方法区域（Method Area）</h2>

<ol>
<li><p>在Sun JDK中这块区域对应的为PermanetGeneration，又称为持久代。</p></li>
<li><p>方法区域存放了所加载的类的信息（名称、修饰符等）、类中的静态变量、类中定义为final类型的常量、类中的Field信息、类中的方法信息，当开发人员在程序中通过Class</p></li>
</ol>


<p>对象中的getName、isInterface等方法来获取信息时，这些数据都来源于方法区域，同时方法区域也是全局共享的，在一定的条件下它也会被GC，当方法区域需要使用的内存超过其允许的大小时，会抛出OutOfMemory的错误信息。</p>

<h2>第五块：运行时常量池（Runtime Constant Pool）</h2>

<p>存放的为类中的固定的常量信息、方法和Field的引用信息等，其空间从方法区域中分配。</p>

<h2>第六块：本地方法堆栈（Native Method Stacks）</h2>

<p>JVM采用本地方法堆栈来支持native方法的执行，此区域用于存储每个native方法调用的状态。</p>

<h1>六、JVM垃圾回收</h1>

<h3>JVM分别对新生代和旧生代采用的两种垃圾回收机制？</h3>

<ol>
<li><p>新生代的GC：新生代通常存活时间较短，因此基于Copying算法来进行回收，所谓Copying算法就是扫描出存活的对象，并复制到一块新的完全未使用的空间中，对应于新生代，就是在Eden和FromSpace或ToSpace之间copy。新生代采用空闲指针的方式来控制GC触发，指针保持最后一个分配的对象在新生代区间的位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。当连续分配对象时，对象会逐渐从eden到survivor，最后到旧生代。</p></li>
<li><p>旧生代的GC：旧生代与新生代不同，对象存活的时间比较长，比较稳定，因此采用标记(Mark)算法来进行回收，所谓标记就是扫描出存活的对象，然后再进行回收未被标记的对象，回收后对用空出的空间要么进行合并，要么标记出来便于下次进行分配，总之就是要减少内存碎片带来的效率损耗。</p></li>
</ol>


<h3>如何判断对象是否可以被回收？</h3>

<ol>
<li><p>引用计数法</p></li>
<li><p>根搜索算法</p></li>
</ol>


<h3>垃圾收集算法：</h3>

<ol>
<li><p>标记-清除（Mark-Sweep）算法</p></li>
<li><p>复制算法</p></li>
<li><p>标记-整理算法</p></li>
<li><p>分代收集算法</p></li>
</ol>


<h3>GC的基本原理：将内存中不再被使用的对象进行回收，GC中用于回收的方法称为收集器，由于GC需要消耗一些资源和时间，Java在对对象的生命周期特征进行分析后，按照新生代、旧生代的方式来对对象进行收集，以尽可能的缩短GC对应用造成的暂停</h3>

<ol>
<li><p>对新生代的对象的收集称为minor GC；</p></li>
<li><p>对旧生代的对象的收集称为Full GC；</p></li>
<li><p>程序中主动调用System.gc()强制执行的GC为Full GC。</p></li>
</ol>


<h3>不同的对象引用类型， GC会采用不同的方法进行回收，JVM对象的引用分为了四种类型：</h3>

<ol>
<li><p>强引用：默认情况下，对象采用的均为强引用（这个对象的实例没有其他对象引用，GC时才会被回收）</p></li>
<li><p>软引用：软引用是Java中提供的一种比较适合于缓存场景的应用（只有在内存不够用的情况下才会被GC）</p></li>
<li><p>弱引用：在GC时一定会被GC回收</p></li>
<li><p>虚引用：由于虚引用只是用来得知对象是否被GC</p></li>
</ol>


<h1>JVM和DVM的不同点</h1>

<h2>1. Dalvik 和标准 Java 虚拟机(JVM)的首要差别</h2>

<p>Dalvik 基于寄存器，而 JVM 基于栈。基于寄存器的虚拟机对于更大的程序来说，在它们编译的时候，花费的时间更短。</p>

<h2>2. Dalvik 和 Java 字节码的区别</h2>

<p>Dalvik执行.dex格式的字节码，而JVM执行.class格式的字节码。android程序编译完之后生产.class文件，还有通过aapt工具生成的R.class等，然后dx工具会把.class文件处理成.dex文件，最终资源文件和.dex文件等打包成.apk文件。</p>

<h2>3. Dalvik和Java运行环境的区别</h2>

<p>Dalvik主要是完成对象生命周期管理，堆栈管理，线程管理，安全和异常管理，以及垃圾回收等等重要功能。
Dalvik负责进程隔离和线程管理，每一个Android应用在底层都会对应一个独立的Dalvik虚拟机实例，其代码在虚拟机的解释下得以执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guava Library Tips]]></title>
    <link href="http://wodis.github.io/blog/2014/09/02/google-guava-library-tips/"/>
    <updated>2014-09-02T18:58:38+08:00</updated>
    <id>http://wodis.github.io/blog/2014/09/02/google-guava-library-tips</id>
    <content type="html"><![CDATA[<h1>String</h1>

<ul>
<li>CharMatcher (which can be considered as a light form of JDK&rsquo;s Pattern+Matcher with string manipulation capabilities)</li>
<li>Joiner and MapJoiner (which are useful for joining iterables or arrays into string representations)</li>
<li>Splitter (which is split() of JDK on steroids).</li>
</ul>


<h3>CharMatcher.JAVA_LETTER_OR_DIGIT</h3>

<p>.countIn(&ldquo;&rdquo;)</p>

<p>.matchesAllOf(&ldquo;&rdquo;)</p>

<p>.matchesNoneOf(&ldquo;&rdquo;)</p>

<p>.negate()</p>

<p>.removeFrom(&ldquo;&rdquo;)</p>

<p>.retainFrom(&ldquo;&rdquo;)</p>

<p>.indexIn(&ldquo;&rdquo;)</p>

<p>.anyOf(&ldquo;&rdquo;)</p>

<p>.noneOf(&ldquo;&rdquo;)</p>

<p>.inRange(&lsquo;&rsquo;, &lsquo;&rsquo;)</p>

<p>.or(CharMatcher)</p>

<p>.and(CharMatcher)</p>

<h3>Joiner</h3>

<p>.on(&ldquo;&rdquo;)</p>

<p>.join(List)</p>

<p>.skipNulls()</p>

<p>.useForNull(&ldquo;&rdquo;)</p>

<h3>Splitter</h3>

<p>.on(&ldquo;&rdquo;)</p>

<p>.omitEmptyStrings()</p>

<p>.trimResults()</p>

<p>.split(&ldquo;&rdquo;)</p>

<p>.fixedLength(int)</p>

<h3>Strings</h3>

<p>.emptyToNull(&ldquo;&rdquo;)</p>

<p>.isNullOrEmpty(&ldquo;&rdquo;)</p>

<p>.repeat(&ldquo;&rdquo;, int)</p>

<p>.padEnd(&ldquo;&rdquo;, int, &lsquo;&rsquo;)</p>

<p>.padStart(&ldquo;&rdquo;, int, &lsquo;&rsquo;)</p>

<h1>Ordering</h1>

<p>This class is really useful if you need to order your Iterable, find the maximum/minimum element in your Iterable, find the index of an arbitrary element. It implements Comparator interface for backward compatibility..from(Comparator)</p>

<p>.sortedCopy(List)</p>

<p>.explicit(enum)</p>

<p>.usingToString()</p>

<p>.natural()</p>

<p>.binarySearch(List,Object)</p>

<p>.max(List)</p>

<p>.min(List)</p>

<p>.reverse()</p>

<p>.isOrdered()</p>

<p>.isStrictlyOrdered()</p>
]]></content>
  </entry>
  
</feed>

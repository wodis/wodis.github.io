<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Open Tech Pub]]></title>
  <link href="http://wodis.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://wodis.github.io/"/>
  <updated>2015-05-28T19:43:11+08:00</updated>
  <id>http://wodis.github.io/</id>
  <author>
    <name><![CDATA[Wu Di]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Guava Library Tips]]></title>
    <link href="http://wodis.github.io/blog/2014/09/02/google-guava-library-tips/"/>
    <updated>2014-09-02T18:58:38+08:00</updated>
    <id>http://wodis.github.io/blog/2014/09/02/google-guava-library-tips</id>
    <content type="html"><![CDATA[<h1>String</h1>

<ul>
<li>CharMatcher (which can be considered as a light form of JDK&rsquo;s Pattern+Matcher with string manipulation capabilities)</li>
<li>Joiner and MapJoiner (which are useful for joining iterables or arrays into string representations)</li>
<li>Splitter (which is split() of JDK on steroids).</li>
</ul>


<h3>CharMatcher.JAVA_LETTER_OR_DIGIT</h3>

<p>.countIn(&ldquo;&rdquo;)</p>

<p>.matchesAllOf(&ldquo;&rdquo;)</p>

<p>.matchesNoneOf(&ldquo;&rdquo;)</p>

<p>.negate()</p>

<p>.removeFrom(&ldquo;&rdquo;)</p>

<p>.retainFrom(&ldquo;&rdquo;)</p>

<p>.indexIn(&ldquo;&rdquo;)</p>

<p>.anyOf(&ldquo;&rdquo;)</p>

<p>.noneOf(&ldquo;&rdquo;)</p>

<p>.inRange(&lsquo;&rsquo;, &lsquo;&rsquo;)</p>

<p>.or(CharMatcher)</p>

<p>.and(CharMatcher)</p>

<h3>Joiner</h3>

<p>.on(&ldquo;&rdquo;)</p>

<p>.join(List)</p>

<p>.skipNulls()</p>

<p>.useForNull(&ldquo;&rdquo;)</p>

<h3>Splitter</h3>

<p>.on(&ldquo;&rdquo;)</p>

<p>.omitEmptyStrings()</p>

<p>.trimResults()</p>

<p>.split(&ldquo;&rdquo;)</p>

<p>.fixedLength(int)</p>

<h3>Strings</h3>

<p>.emptyToNull(&ldquo;&rdquo;)</p>

<p>.isNullOrEmpty(&ldquo;&rdquo;)</p>

<p>.repeat(&ldquo;&rdquo;, int)</p>

<p>.padEnd(&ldquo;&rdquo;, int, &lsquo;&rsquo;)</p>

<p>.padStart(&ldquo;&rdquo;, int, &lsquo;&rsquo;)</p>

<h1>Ordering</h1>

<p>This class is really useful if you need to order your Iterable, find the maximum/minimum element in your Iterable, find the index of an arbitrary element. It implements Comparator interface for backward compatibility..from(Comparator)</p>

<p>.sortedCopy(List)</p>

<p>.explicit(enum)</p>

<p>.usingToString()</p>

<p>.natural()</p>

<p>.binarySearch(List,Object)</p>

<p>.max(List)</p>

<p>.min(List)</p>

<p>.reverse()</p>

<p>.isOrdered()</p>

<p>.isStrictlyOrdered()</p>
]]></content>
  </entry>
  
</feed>

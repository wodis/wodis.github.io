<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Open Tech Pub]]></title>
  <link href="http://wodis.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://wodis.github.io/"/>
  <updated>2015-05-28T19:41:43+08:00</updated>
  <id>http://wodis.github.io/</id>
  <author>
    <name><![CDATA[Wu Di]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Learning]]></title>
    <link href="http://wodis.github.io/blog/2014/07/01/git-learning/"/>
    <updated>2014-07-01T13:47:06+08:00</updated>
    <id>http://wodis.github.io/blog/2014/07/01/git-learning</id>
    <content type="html"><![CDATA[<h2>Git 工作流程</h2>

<p>一般工作流程如下：</p>

<ul>
<li>克隆 Git 资源作为工作目录。</li>
<li>在克隆的资源上添加或修改文件。</li>
<li>如果其他人修改了，你可以更新资源。</li>
<li>在提交前查看修改。</li>
<li>提交修改。</li>
<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>
</ul>


<p><img src="http://www.openwudi.com/images/2015/1432807147.png" alt="工作流程" /></p>

<h2>Git 创建仓库</h2>

<p>使用您当前目录作为Git仓库，我们只需使它初始化。</p>

<pre><code>git init
</code></pre>

<p>使用指定目录作为Git仓库。</p>

<pre><code>git init newrepo
</code></pre>

<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。
如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>

<pre><code>$ git add *.c
$ git add README
$ git commit -m 'initial project version'
</code></pre>

<h3>从现有仓库克隆</h3>

<p>克隆仓库的命令格式为：</p>

<pre><code>git clone [url]
</code></pre>

<p>比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p>

<pre><code>$ git clone git://github.com/schacon/grit.git
</code></pre>

<p>执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。
如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p>

<pre><code>$ git clone git://github.com/schacon/grit.git mygrit
</code></pre>

<h2>Git 工作区、暂存区和版本库</h2>

<p>我们先来理解下Git 工作区、暂存区和版本库概念</p>

<ul>
<li>工作区：就是你在电脑里能看到的目录。</li>
<li>暂存区：英文叫stage, 或index。一般存放在"git目录"下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li>版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>
</ul>


<p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p>

<p><img src="http://www.openwudi.com/images/2015/1432810388.jpg" alt="工作区、暂存区和版本库" /></p>

<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 &ldquo;index&rdquo; 的区域是暂存区（stage, index），标记为 &ldquo;master&rdquo; 的是 master 分支所代表的目录树。</p>

<p>图中我们可以看出此时 &ldquo;HEAD&rdquo; 实际是指向 master 分支的一个"游标"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p>

<p>图中的 objects 标识的区域为 Git 的对象库，实际位于 &ldquo;.git/objects&rdquo; 目录下，里面包含了创建的各种对象及内容。</p>

<p>当对工作区修改（或新增）的文件执行 &ldquo;git add&rdquo; 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p>

<p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>

<p>当执行 &ldquo;git reset HEAD&rdquo; 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>

<p>当执行 &ldquo;git rm &ndash;cached <file>&rdquo; 命令时，会直接从暂存区删除文件，工作区则不做出改变。</p>

<p>当执行 &ldquo;git checkout .&rdquo; 或者 &ldquo;git checkout &ndash; <file>&rdquo; 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</p>

<p>当执行 &ldquo;git checkout HEAD .&rdquo; 或者 &ldquo;git checkout HEAD <file>&rdquo; 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p>

<h2>Git 基本操作</h2>

<p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。</p>

<h3>基本快照</h3>

<h4>git add</h4>

<p>git add 命令可将该文件添加到缓存，如我们添加以下两个文件：</p>

<pre><code>$ touch README
$ touch hello.php
$ ls
README      hello.php
$ git status -s
?? README
?? hello.php
$
</code></pre>

<p>git status 命令用于查看项目的当前状态。接下来我们执行 git add 命令来添加文件：</p>

<pre><code>$ git add README hello.php
</code></pre>

<p>现在我们再执行 git status，就可以看到这两个文件已经加上去了。</p>

<pre><code>$ git status -s
A  README
A  hello.php
$
</code></pre>

<p>新项目中，添加所有文件很普遍，可以在当前工作目录执行命令：git add .。
现在我们改个文件，再执行一下 git status：</p>

<pre><code>$ vim README
$ git status -s
AM README
A  hello.php
</code></pre>

<p>&ldquo;AM&rdquo; 状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们在执行 git add 命令将其添加到缓存中：</p>

<pre><code>$ git add .
$ git status -s
A  README
A  hello.php
</code></pre>

<p>当你要将你的修改包含在即将提交的快照里的时候，需要执行 git add。</p>

<h4>git status</h4>

<p>git status 以查看在你上次提交之后是否有修改。
演示该命令的时候加了 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容：</p>

<pre><code>$ git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached &lt;file&gt;..." to unstage)

    new file:   README
    new file:   hello.php
</code></pre>

<h4>git diff</h4>

<p>执行 git diff 来查看执行 git status 的结果的详细信息。
git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。</p>

<ul>
<li>尚未缓存的改动：git diff</li>
<li>查看已缓存的改动： git diff &ndash;cached</li>
<li>查看已缓存的与未缓存的所有改动：git diff HEAD</li>
<li>显示摘要而非整个 diff：git diff &ndash;stat</li>
</ul>


<p>修改 hello.php 文件中输入以下内容：</p>

<pre><code>$ git status -s
A  README
AM hello.php
$ git diff
diff --git a/hello.php b/hello.php
index e69de29..d1a9166 100644
--- a/hello.php
+++ b/hello.php
@@ -0,0 +1,3 @@
+&lt;?php
+echo 'www.openwudi.com';
+?&gt;
</code></pre>

<p>git status显示你上次提交更新至后所更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。
接下来我们来查看下 git diff &ndash;cached 的执行效果：</p>

<pre><code>$ git add hello.php
$ git status -s
A  README
A  hello.php
$ git diff --cached
diff --git a/README b/README
new file mode 100644
index 0000000..704cce7
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+w3cschool.cc
diff --git a/hello.php b/hello.php
new file mode 100644
index 0000000..d1a9166
--- /dev/null
+++ b/hello.php
@@ -0,0 +1,3 @@
+&lt;?php
+echo 'www.openwudi.com';
+?&gt;
</code></pre>

<h4>git commit</h4>

<p>使用 git add 命令将想要快照的内容写入了缓存， 而执行 git commit 记录缓存区的快照。
Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p>

<pre><code>$ git config --global user.name 'openwudi'
$ git config --global user.email xxx@openwudi.com
</code></pre>

<p>接下来我们写入缓存，并提交对 hello.php 的所有改动。在首个例子中，我们使用 -m 选项以在命令行中提供提交注释。</p>

<pre><code>$ git add hello.php
$ git status -s
A  README
A  hello.php
$ git commit -m 'test comment from openwudi.com'
[master (root-commit) 85fc7e7] test comment from w3cschool.cc
 2 files changed, 4 insertions(+)
 create mode 100644 README
 create mode 100644 hello.php
</code></pre>

<p>现在我们已经记录了快照。如果我们再执行 git status:</p>

<pre><code>$ git status
# On branch master
nothing to commit (working directory clean)
</code></pre>

<p>以上输出说明我们在最近一次提交之后，没有做任何改动，是一个"干净的工作目录"。</p>

<p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：</p>

<pre><code>git commit -a
</code></pre>

<h4>git reset HEAD</h4>

<p>git reset HEAD 命令用于取消缓存已缓存的内容。
这里我们有两个最近提交之后又有所改动的文件。我们将两个都缓存，并取消缓存其中一个。</p>

<pre><code>$ git status -s
 M README
 M hello.php
$ git add .
$ git status -s
 M  README
 M  hello.pp
$ git reset HEAD -- hello.php
 Unstaged changes after reset:
 M hello.php
$ git status -s
 M  README
 M hello.php
</code></pre>

<p>现在你执行 git commit 将只记录 README 文件的改动，并不含现在并不在缓存中的 hello.pp。</p>

<h4>git rm</h4>

<p>git rm 将文件从缓存区中移除。如我们删除 hello.php文件：</p>

<pre><code>$ git rm hello.php
rm 'hello.php'
$ ls
README
</code></pre>

<p>默认情况下，git rm file 会将文件从缓存区和你的硬盘中（工作目录）删除。 如果要在工作目录中留着该文件，可以使用命令：</p>

<pre><code>git rm --cached
</code></pre>

<h4>git mv</h4>

<p>git mv 命令做得所有事情就是 git rm &ndash;cached， 重命名磁盘上的文件，然后再执行 git add 把新文件添加到缓存区。因此，虽然有 git mv 命令，但它有点多余 。</p>

<h2>Git分支模型图</h2>

<p><img src="http://www.openwudi.com/images/2015/1432791784.png" alt="git branch" /></p>
]]></content>
  </entry>
  
</feed>

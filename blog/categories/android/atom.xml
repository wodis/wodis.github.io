<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Open Tech Pub]]></title>
  <link href="http://wodis.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://wodis.github.io/"/>
  <updated>2015-08-14T16:22:24+08:00</updated>
  <id>http://wodis.github.io/</id>
  <author>
    <name><![CDATA[Wu Di]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Eclipse ADT Bundle下载]]></title>
    <link href="http://wodis.github.io/blog/2015/08/04/adt-bundle/"/>
    <updated>2015-08-04T17:32:10+08:00</updated>
    <id>http://wodis.github.io/blog/2015/08/04/adt-bundle</id>
    <content type="html"><![CDATA[<p>Android官方主页不再提供Eclipse ADT Bundle的下载，并且声明放弃维护。</p>

<p>以下是20140702对应操作系统的下载地址：</p>

<p>windows 32: <a href="https://dl.google.com/android/adt/adt-bundle-windows-x86-20140702.zip">https://dl.google.com/android/adt/adt-bundle-windows-x86-20140702.zip</a></p>

<p>windows 64: <a href="https://dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip">https://dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip</a></p>

<p>Mac 64: <a href="https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip">https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip</a></p>

<p>Linux 86: <a href="https://dl.google.com/android/adt/adt-bundle-linux-x86-20140702.zip">https://dl.google.com/android/adt/adt-bundle-linux-x86-20140702.zip</a></p>

<p>Linux 64: <a href="https://dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip">https://dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM工作原理摘要]]></title>
    <link href="http://wodis.github.io/blog/2015/07/20/jvm-zhai-yao/"/>
    <updated>2015-07-20T16:34:57+08:00</updated>
    <id>http://wodis.github.io/blog/2015/07/20/jvm-zhai-yao</id>
    <content type="html"><![CDATA[<h1>一、JVM的生命周期</h1>

<p>1.JVM实例对应了一个独立运行的java程序它是进程级别</p>

<p>a)启动。启动一个Java程序时，一个JVM实例就产生了，任何一个拥有public static void main(String[] args)函数的class都可以作为JVM实例运行的起点</p>

<p>b)运行。main()作为该程序初始线程的起点，任何其他线程均由该线程启动。JVM内部有两种线程：守护线程和非守护线程，main()属于非守护线程，守护线程通常由JVM自己使用，java程序也可以标明自己创建的线程是守护线程</p>

<p>c)消亡。当程序中的所有非守护线程都终止时，JVM才退出；若安全管理器允许，程序也可以使用Runtime类或者System.exit()来退出</p>

<p>2.JVM执行引擎实例则对应了属于用户运行程序的线程它是线程级别的</p>

<h1>二、JVM的体系结构</h1>

<p>1.类装载器（ClassLoader）（用来装载.class文件）</p>

<p>2.执行引擎（执行字节码，或者执行本地方法）</p>

<p>3.运行时数据区（方法区、堆、java栈、PC寄存器、本地方法栈）</p>

<h1>三、JVM类加载器</h1>

<h2>JVM整个类加载过程的步骤：</h2>

<h3>1.装载</h3>

<p>装载过程负责找到二进制字节码并加载至JVM中，JVM通过类名、类所在的包名通过ClassLoader来完成类的加载，
同样，也采用以上三个元素来标识一个被加载了的类：类名+包名+ClassLoader实例ID。</p>

<h3>2.链接</h3>

<p>链接过程负责对二进制字节码的格式进行校验、初始化装载类中的静态变量以及解析类中调用的接口、类。</p>

<p>完成校验后，JVM初始化类中的静态变量，并将其值赋为默认值。</p>

<p>最后对类中的所有属性、方法进行验证，以确保其需要调用的属性、方法存在，以及具备应的权限（例如public、private域权限等），会造成NoSuchMethodError、NoSuchFieldError等错误信息。</p>

<h3>3.初始化</h3>

<p>初始化过程即为执行类中的静态初始化代码、构造器代码以及静态属性的初始化，在四种情况下初始化过程会被触发执行：</p>

<p>调用了new；</p>

<p>反射调用了类中的方法；</p>

<p>子类调用了初始化；</p>

<p>JVM启动过程中指定的初始化类。</p>

<p>JVM类加载顺序：</p>

<p>JVM两种类装载器包括：启动类装载器和用户自定义类装载器。</p>

<p>启动类装载器是JVM实现的一部分；</p>

<p>用户自定义类装载器则是Java程序的一部分，必须是ClassLoader类的子类。</p>

<h3>JVM装载顺序：</h3>

<p>Jvm启动时，由Bootstrap向User-Defined方向加载类；</p>

<p>应用进行ClassLoader时，由User-Defined向Bootstrap方向查找并加载类；</p>

<p>1.Bootstrap ClassLoader</p>

<p>这是JVM的根ClassLoader，它是用C++实现的，JVM启动时初始化此ClassLoader，并由此ClassLoader完成$JAVA_HOME中jre/lib/rt.jar（Sun JDK的实现）中所有class文件的加载，这个jar中包含了java规范定义的所有接口以及实现。</p>

<p>2.Extension ClassLoader</p>

<p>JVM用此classloader来加载扩展功能的一些jar包。</p>

<p>3.System ClassLoader</p>

<p>JVM用此classloader来加载启动参数中指定的Classpath中的jar包以及目录，在Sun JDK中ClassLoader对应的类名为AppClassLoader。</p>

<p>4.User-Defined ClassLoader</p>

<p>User-DefinedClassLoader是Java开发人员继承ClassLoader抽象类自行实现的ClassLoader，基于自定义的ClassLoader可用于加载非Classpath中的jar以及目录。</p>

<h3>ClassLoader抽象类的几个关键方法：</h3>

<p>（1）loadClass</p>

<p>此方法负责加载指定名字的类，ClassLoader的实现方法为先从已经加载的类中寻找，如没有则继续从parent ClassLoader中寻找，如仍然没找到，则从System ClassLoader中寻找，最后再调用findClass方法来寻找，如要改变类的加载顺序，则可覆盖此方法</p>

<p>（2）findLoadedClass</p>

<p>此方法负责从当前ClassLoader实例对象的缓存中寻找已加载的类，调用的为native的方法。</p>

<p>（3）findClass</p>

<p>此方法直接抛出ClassNotFoundException，因此需要通过覆盖loadClass或此方法来以自定义的方式加载相应的类。</p>

<p>（4）findSystemClass</p>

<p>此方法负责从System ClassLoader中寻找类，如未找到，则继续从Bootstrap ClassLoader中寻找，如仍然为找到，则返回null。</p>

<p>（5）defineClass</p>

<p>此方法负责将二进制的字节码转换为Class对象</p>

<p>（6）resolveClass</p>

<p>此方法负责完成Class对象的链接，如已链接过，则会直接返回。</p>

<h1>四、JVM执行引擎</h1>

<h3>在执行方法时JVM提供了四种指令来执行：</h3>

<ol>
<li><p>invokestatic：调用类的static方法</p></li>
<li><p>invokevirtual：调用对象实例的方法</p></li>
<li><p>invokeinterface：将属性定义为接口来进行调用</p></li>
<li><p>invokespecial：JVM对于初始化对象（Java构造器的方法为：<init>）以及调用对象实例中的私有方法时。</p></li>
</ol>


<h3>主要的执行技术有:</h3>

<p>解释，即时编译，自适应优化、芯片级直接执行</p>

<ol>
<li><p>解释属于第一代JVM，</p></li>
<li><p>即时编译JIT属于第二代JVM，</p></li>
<li><p>自适应优化（目前Sun的HotspotJVM采用这种技术）则吸取第一代JVM和第二代</p></li>
</ol>


<p>JVM的经验，采用两者结合的方式</p>

<p>开始对所有的代码都采取解释执行的方式，并监视代码执行情况，然后对那些经常调用的方法启动一个后台线程，将其编译为本地代码，并进行优化。若方法不再频繁使用，则取消编译过的代码，仍对其进行解释执行。</p>

<h1>五、JVM运行时数据区</h1>

<h2>第一块：PC寄存器</h2>

<p>PC寄存器是用于存储每个线程下一步将执行的JVM指令，如该方法为native的，则PC寄存器中不存储任何信息。</p>

<h2>第二块：JVM栈</h2>

<p>JVM栈是线程私有的，每个线程创建的同时都会创建JVM栈，JVM栈中存放的为当前线程中局部基本类型的变量（java中定义的八种基本类型：boolean、char、byte、short、int、long、float、double）、部分的返回结果以及Stack Frame，非基本类型的对象在JVM栈上仅存放一个指向堆上的地址</p>

<h2>第三块：堆（Heap）</h2>

<p>它是JVM用来存储对象实例以及数组值的区域，可以认为Java中所有通过new创建的对象的内存都在此分配，Heap中的对象的内存需要等待GC进行回收。</p>

<ol>
<li><p>堆是JVM中所有线程共享的，因此在其上进行对象内存的分配均需要进行加锁，这也导致了new对象的开销是比较大的</p></li>
<li><p>Sun Hotspot JVM为了提升对象内存分配的效率，对于所创建的线程都会分配一块独立的空间TLAB（Thread Local Allocation Buffer），其大小由JVM根据运行的情况计算而得，在TLAB上分配对象时不需要加锁，因此JVM在给线程的对象分配内存时会尽量的在TLAB上分配，在这种情况下JVM中分配对象内存的性能和C基本是一样高效的，但如果对象过大的话则仍然是直接使用堆空间分配</p></li>
<li><p>TLAB仅作用于新生代的Eden Space，因此在编写Java程序时，通常多个小的对象比大的对象分配起来更加高效。</p></li>
</ol>


<h2>第四块：方法区域（Method Area）</h2>

<ol>
<li><p>在Sun JDK中这块区域对应的为PermanetGeneration，又称为持久代。</p></li>
<li><p>方法区域存放了所加载的类的信息（名称、修饰符等）、类中的静态变量、类中定义为final类型的常量、类中的Field信息、类中的方法信息，当开发人员在程序中通过Class</p></li>
</ol>


<p>对象中的getName、isInterface等方法来获取信息时，这些数据都来源于方法区域，同时方法区域也是全局共享的，在一定的条件下它也会被GC，当方法区域需要使用的内存超过其允许的大小时，会抛出OutOfMemory的错误信息。</p>

<h2>第五块：运行时常量池（Runtime Constant Pool）</h2>

<p>存放的为类中的固定的常量信息、方法和Field的引用信息等，其空间从方法区域中分配。</p>

<h2>第六块：本地方法堆栈（Native Method Stacks）</h2>

<p>JVM采用本地方法堆栈来支持native方法的执行，此区域用于存储每个native方法调用的状态。</p>

<h1>六、JVM垃圾回收</h1>

<h3>JVM分别对新生代和旧生代采用的两种垃圾回收机制？</h3>

<ol>
<li><p>新生代的GC：新生代通常存活时间较短，因此基于Copying算法来进行回收，所谓Copying算法就是扫描出存活的对象，并复制到一块新的完全未使用的空间中，对应于新生代，就是在Eden和FromSpace或ToSpace之间copy。新生代采用空闲指针的方式来控制GC触发，指针保持最后一个分配的对象在新生代区间的位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。当连续分配对象时，对象会逐渐从eden到survivor，最后到旧生代。</p></li>
<li><p>旧生代的GC：旧生代与新生代不同，对象存活的时间比较长，比较稳定，因此采用标记(Mark)算法来进行回收，所谓标记就是扫描出存活的对象，然后再进行回收未被标记的对象，回收后对用空出的空间要么进行合并，要么标记出来便于下次进行分配，总之就是要减少内存碎片带来的效率损耗。</p></li>
</ol>


<h3>如何判断对象是否可以被回收？</h3>

<ol>
<li><p>引用计数法</p></li>
<li><p>根搜索算法</p></li>
</ol>


<h3>垃圾收集算法：</h3>

<ol>
<li><p>标记-清除（Mark-Sweep）算法</p></li>
<li><p>复制算法</p></li>
<li><p>标记-整理算法</p></li>
<li><p>分代收集算法</p></li>
</ol>


<h3>GC的基本原理：将内存中不再被使用的对象进行回收，GC中用于回收的方法称为收集器，由于GC需要消耗一些资源和时间，Java在对对象的生命周期特征进行分析后，按照新生代、旧生代的方式来对对象进行收集，以尽可能的缩短GC对应用造成的暂停</h3>

<ol>
<li><p>对新生代的对象的收集称为minor GC；</p></li>
<li><p>对旧生代的对象的收集称为Full GC；</p></li>
<li><p>程序中主动调用System.gc()强制执行的GC为Full GC。</p></li>
</ol>


<h3>不同的对象引用类型， GC会采用不同的方法进行回收，JVM对象的引用分为了四种类型：</h3>

<ol>
<li><p>强引用：默认情况下，对象采用的均为强引用（这个对象的实例没有其他对象引用，GC时才会被回收）</p></li>
<li><p>软引用：软引用是Java中提供的一种比较适合于缓存场景的应用（只有在内存不够用的情况下才会被GC）</p></li>
<li><p>弱引用：在GC时一定会被GC回收</p></li>
<li><p>虚引用：由于虚引用只是用来得知对象是否被GC</p></li>
</ol>


<h1>JVM和DVM的不同点</h1>

<h2>1. Dalvik 和标准 Java 虚拟机(JVM)的首要差别</h2>

<p>Dalvik 基于寄存器，而 JVM 基于栈。基于寄存器的虚拟机对于更大的程序来说，在它们编译的时候，花费的时间更短。</p>

<h2>2. Dalvik 和 Java 字节码的区别</h2>

<p>Dalvik执行.dex格式的字节码，而JVM执行.class格式的字节码。android程序编译完之后生产.class文件，还有通过aapt工具生成的R.class等，然后dx工具会把.class文件处理成.dex文件，最终资源文件和.dex文件等打包成.apk文件。</p>

<h2>3. Dalvik和Java运行环境的区别</h2>

<p>Dalvik主要是完成对象生命周期管理，堆栈管理，线程管理，安全和异常管理，以及垃圾回收等等重要功能。
Dalvik负责进程隔离和线程管理，每一个Android应用在底层都会对应一个独立的Dalvik虚拟机实例，其代码在虚拟机的解释下得以执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发中使用Java 8 Stream]]></title>
    <link href="http://wodis.github.io/blog/2015/07/17/java-8-stream-android/"/>
    <updated>2015-07-17T11:48:52+08:00</updated>
    <id>http://wodis.github.io/blog/2015/07/17/java-8-stream-android</id>
    <content type="html"><![CDATA[<p>你将从这篇文章中了解到什么是Stream，并且如何在Android开发中使用它。</p>

<p>不幸的是Android还不支持Java 8，Kitkat（Android 4.4+）以后的版本可以支持Java 7。
那么只能和新特性说再见了吗？当然不是，一些聪明人想出了一个解决办法：</p>

<p><a href="https://github.com/orfjackal/retrolambda">RETROLAMBDA</a></p>

<h1>如何安装RETROLAMBDA</h1>

<p>作为热身，让我们来看看如何快速的在项目中使用Retrolambda。
（假设你已经了解Android Studio的gradle构建系统以及它是如何工作的）</p>

<p>1.在./build.gradle文件中添加新的classpath:</p>

<p><img src="http://www.openwudi.com/images/2015/1437106139.png" alt="1437106139.png" /></p>

<p>2.在./app/build.gradle文件中添加Retrolambda插件:</p>

<p><img src="http://www.openwudi.com/images/2015/1437106186.png" alt="1437106186.png" /></p>

<p>3.还需要添加:</p>

<p><img src="http://www.openwudi.com/images/2015/1437106215.png" alt="1437106215.png" /></p>

<p>4.编译gradle</p>

<h1>STREAM</h1>

<p><code>A stream is an abstraction for specifying aggregate computations on a DataSet</code></p>

<p>Java 8 Stream API引入的目的在于弥补Java函数式编程的缺陷。对于很多支持函数式编程的语言，map()、reduce()基本上都内置到语言的标准库中了，不过，Java 8的Stream API总体来讲仍然是非常完善和强大，足以用很少的代码完成许多复杂的功能。</p>

<p>创建一个Stream有很多方法，最简单的方法是把一个Collection变成Stream。我们来看最基本的几个操作：</p>

<pre><code>public static void main(String[] args) {
    List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
    Stream&lt;Integer&gt; stream = numbers.stream();
    stream.filter((x) -&gt; {
        return x % 2 == 0;
    }).map((x) -&gt; {
        return x * x;
    }).forEach(System.out::println);
}
</code></pre>

<p>集合类新增的stream()方法用于把一个集合变成Stream，然后，通过filter()、map()等实现Stream的变换。Stream还有一个forEach()来完成每个元素的迭代。</p>

<p>使用Stream的两个原因：</p>

<p>1.集合类会持有所有元素在内存中，大集合会占用大量内存。而Stream的元素是在访问的时候被计算出来，内存占用小。</p>

<p>2.二是集合类的迭代逻辑是调用者负责，通常是for循环，而Stream的迭代是隐含在对Stream的各种操作中，例如map()。</p>

<p>更多特性参考InfoQ的文章<a href="http://www.infoq.com/cn/articles/java8-new-features-new-stream-api">Java 8新特性：全新的Stream API</a></p>

<h1>Android中使用轻量级Stream API</h1>

<p>上一部分介绍了Java 8 Stream的使用，但是我们的目的是讨论Android如何去使用这个特性。我们可以通过
<a href="https://github.com/aNNiMON/Lightweight-Stream-API">Lightweight-Stream-API</a>，只需要增加它的classpath。</p>

<p><code>compile 'com.annimon:stream:1.0.1'</code></p>

<h1>JAVA 8 vs Lightweight-Stream-API（LSA）</h1>

<p>虽然Java 8的Stream和LSA工作方式一样，但他们间仍有少量的区别。例如使用LSA创建Stream时使用Stream.of(YourCollection)，而Java 8中使用Stream<YourCollectionItem>。
另一个区别为排序操作，Java 8中使用‘sort()’，而LSA中使用‘sorted()’。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android详细理解Service]]></title>
    <link href="http://wodis.github.io/blog/2015/07/04/android-service-shen-ru-li-jie/"/>
    <updated>2015-07-04T21:16:11+08:00</updated>
    <id>http://wodis.github.io/blog/2015/07/04/android-service-shen-ru-li-jie</id>
    <content type="html"><![CDATA[<h1>Service</h1>

<p>官方文档给出的解释为。Service是一个无界面，长时间在后台运行的应用组件。
其他的应用组件可以启动一个Service，即使用户切换到其他应用后Service任然在后台运行。
另外，组件可以通过绑定(Bind)的方式与Service进行交互，甚至使用Interprocess Communication(IPC)的方式。</p>

<p>Service基本上可以采取两种形式：</p>

<p>Started</p>

<p>当一个组件调用startService()方法后，Service将启动。一旦被启动，无论启动它的组件是否被销毁，Service都会在后台运行。
这种方式通常为了执行一个单独的操作，并且我们不需要Service返回状态。</p>

<p>Bound</p>

<p>当一个组件调用bindService()方法后，Service提供了一个接口使得可以与组件进行交互。包括发送请求，获得结果，甚至进程间通信IPC。</p>

<p>一般会分开讨论这两种Service的启动类型，但我们可以使Service在这两种方式下运行。这取决于你是否实现了一对回调方法：onStartCommand()允许组件启动；onBind()允许组件绑定。</p>

<p><code>值得注意的是Service是运行在主线程中的，这意味着Service不能创建它自己的线程，也不能运行在其他进程中（除非特别指定）。一旦你需要做一些消耗CPU的工作或者阻塞操作，你应该在Service中创建一个新的线程去完成。</code></p>

<p><strong>何时使用Service或者Thread：</strong>Service因为是Android中的一个组件，会一直在后台运行，请确认是否需要一个常驻的功能。Thread通常是处理一个异步的任务，任务执行完就不再需要，它避免阻塞主线程。</p>

<h1>Service常用基类</h1>

<h3>Service</h3>

<p>这是所有服务类的基类，继承该类，对于在服务中创建新线程很重要。因为默认服务使用应用的主线程，可能会降低程序的性能。</p>

<h3>IntentService</h3>

<p>这是一个Service的子类，该子类使用线程处理所有启动请求，一次一个。这是不使用服务处理多任务请求的最佳选择。你需要做的只是实现onHandleIntent()方法即可。可以为每个启动请求接收到intent，放到后台工作即可。
内部使用一个Handler和Looper来实现子线程处理.</p>

<h1>Service生命周期</h1>

<h3>未绑定的服务</h3>

<p>startService() -> onCreate() -> onStartCommand() -> 运行服务 -> 停止 -> onDestroy() -> 服务关闭</p>

<h3>绑定的服务</h3>

<p>bindService() -> onCreate() -> onBind() -> 客户端绑定到服务 -> 客户端调用unbindService() -> onUnbind() -> onDestroy() -> 服务关闭</p>

<h1>自动启动Service</h1>

<p>通常的办法是实现一个BroadcastReceiver，监听ACTION_BOOT_COMPLETED即可，并在接收完该广播后通过AlarmManager轮询发送自定义广播，再通过另一个BroadcastReceiver启动Service。</p>

<p>如果通过某种方式将整个进程杀死，所有的服务也会被杀死，此时将无法定期启动服务了。要想达到即使杀死了也可以自动启动服务，需要注册一个系统级别的BroadcastReceiver。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google I/O回顾:Android开发工具的新玩意]]></title>
    <link href="http://wodis.github.io/blog/2015/06/08/android-xin-kai-fa-gong-ju/"/>
    <updated>2015-06-08T12:52:33+08:00</updated>
    <id>http://wodis.github.io/blog/2015/06/08/android-xin-kai-fa-gong-ju</id>
    <content type="html"><![CDATA[<p>每年我们都在期待Google I/O大会中Android相关的新东西。然而，在线看视频简直太花时间了（拜GFW所赐还得使用一些小手段观看）。
这篇文章对整个视频做了总结，希望可以帮到大家。</p>

<h1>Easing Design</h1>

<p><img src="http://www.openwudi.com/images/2015/1433733652.png" alt="1433733652.png" /></p>

<p><a href="http://android-developers.blogspot.co.at/2015/05/android-design-support-library.html">Android Design Support Library</a>
可以帮你遵循最新的Material Design风格。这个库包含了一系列Material Design组件，
例如Navigation Drawer、Floating Labels for Editing Text、Floating Action Buttons和Snackbar，
所有的组件都兼容Android 2.1以上版本。</p>

<p><img src="http://www.openwudi.com/images/2015/1433733704.png" alt="1433733704.png" /></p>

<p>Android L已经介绍了Vector Drawables。随着Android Studio 1.3更改了Android Gradle插件，我们可以使用编译系统通过SVG和Vector Drawables生成不同dp的raster图像。</p>

<p>最终，开发工具团队开始重写了整个可视化设计编辑器、它帮你实现更多所见即所得的方式。</p>

<h1>Improving the Grade Plugin &amp; Build System</h1>

<p><img src="http://www.openwudi.com/images/2015/1433736364.png" alt="1433736364.png" /></p>

<p>Android Gradle插件有时会靠不住，特别是它作为依赖管理，相关问题已经得到了修复。</p>

<p>Android Gradle插件最令人纠结的当然是超长的编译时间。工具团队从多个层面去解决这个问题。
<a href="http://tools.android.com/tech-docs/jackandjill">Jack</a>，Java Android Compiler Kit的缩写，
它将Java源码直接编译成Android的Dex文件格式。它是基于Eclispse Java编译器的，这个过程减少了一步。换句话说就是，不需要在转成Dex前编译成JVM字节码。另外，它还支持增量编译。</p>

<p>压缩处理PNG图片同样花费了巨大的时间。工具团队已经提升了这方面的性能，将500张PNG和.9图从4秒减低到400毫秒。</p>

<p>aapt(Android Asset Packaging Tool)，负责打包所有的Dex和资源文件，同样也得到了优化。</p>

<p>另外一个开销是因为Gradle自己造成的，当Gradle开始编译Android项目的时候，它不得不创建一个模块去描述variants(flavor + build type)，
即使只打算构建一个，它也会解析所有variants的依赖。并且它会执行自定义的逻辑。开发团队使用Gradle Ware优化了这些步骤。这是结果：</p>

<p><img src="http://www.openwudi.com/images/2015/1433743364.png" alt="1433743364.png" /></p>

<p>当然，还没有说完。开发工具团队正在致力于新的Android Gradle插件，它基于Gradle Ware新的API。
新的API允许Gradle直接管理模块，并且可以让它做一些事情，比如缓存、并行和增量构建。这是下一代插件的结果：</p>

<p><img src="http://www.openwudi.com/images/2015/1433744540.png" alt="1433744540.png" /></p>

<p>这些数字并不包括缓存的优化，因为它还没开发完成。但它有一个小缺点，就是新插件使用新的DSL，而且还不能向下兼容。预览版将在几周后放出，但是正式版可能会在年末。</p>

<p>开发工具团队也介绍了一个Data Binding Library。它需要构建系统的支持，因为它会从XML文件声明中生成Java源文件。老版和新版的Android Gradle插件都可以支持。Android Studio还开始支持C/C++进行NDK开发。</p>

<h1>Testing</h1>

<p><img src="http://www.openwudi.com/images/2015/1433747802.svg" alt="1433747802.png" /></p>

<p>今年Android测试新发布了<a href="https://developers.google.com/cloud-test-lab/">Cloud Test lab</a>。
它允许你使用Google测试云上的虚拟设备和物理设备进行app测试。并支持自动抓取，不需求自己写用例，当然如果你愿意也是支持的。</p>

<h1>Emulator</h1>

<p><img src="http://www.openwudi.com/images/2015/1433748302.png" alt="1433748302.png" /></p>

<p>模拟器上并没有什么太多的变化，开发工具团队主要致力于稳定、正确性和可配置。Android Studio将下载并安装HAXM，性能上有很大的提升。
Android Auto模拟器中将会提供指纹识别的支持。</p>

<h1>New Support Annotations</h1>

<p><img src="http://www.openwudi.com/images/2015/1433748585.png" alt="1433748585.png" /></p>

<p>Java注解可以在编译和运行时进行很多神奇的事情。新增了13种注解可以帮助你避免一些Bug。</p>

<p>例如，@WorkerThread注解。方法中声明此注解会自动检查代码是否在UI线程。Android Studio会高亮显示错误。</p>

<p>另一个例子是，@RequiresPermission。一旦你使用的API没有在manifest文件中声明权限，Android Studio将会提醒你插入权限。
在Android M中权限控制有了一些变化，用户可以选择同意和拒绝某种权限，这意味着你的代码不得不去处理拒绝后的逻辑。
Android Studio将自动产生一个代码块帮助你完成这件事。</p>

<h1>Data Binding</h1>

<p><img src="http://www.openwudi.com/images/2015/1433750019.png" alt="1433750019.png" /></p>

<p>这个可能是给开发者印象最深的变化。当你开发Android的UI时，通常使用findViewByID()查找XML文件中的布局，并将Java POJO填充到里面。
Data Binding库可以让这个操作变简单。你可以声明POJO类型，变量表达式引用POJO，以及监听XML文件的布局，用来代替原来手动的操作。
在编译时期，构建系统会生成绑定的Java类，关联你的布局和POJO。</p>

<p>使用它只需要两步：POJO实现<code>android.databindings.Observable</code>接口，改变POJO则会反射到UI，反之亦然。
Data Binding库当前还属于beta阶段，需要Android Studio 1.3版本和最新的Gradle插件。更多内容请参考
<a href="https://developer.android.com/tools/data-binding/guide.html">https://developer.android.com/tools/data-binding/guide.html</a></p>

<h1>Profiling Tools</h1>

<p><img src="http://www.openwudi.com/images/2015/1433770237.png" alt="1433770237.png" /></p>

<p>这个内存和性能分析工具做了一些优化。你现在可以查看在Android Studio中堆和方法路径的快照，通过一个下拉的界面，你可以发现问题在哪。
它还能可视化的查看和跟踪，你不需要手动的生成<a href="http://docs.oracle.com/javase/7/docs/technotes/samples/hprof.html">HPROF</a>文件。</p>

<p><img src="http://www.openwudi.com/images/2015/1433770818.png" alt="1433770818.png" /></p>

<p>现在内存快照是下拉显示的，看起来非常简洁。通过调试器可以查看当前的对象。它也可以让你去追踪引用链直到GC的根节点，这样你就可以知道谁持有了垃圾的引用。</p>

<h1>New Features in Upcoming Releases</h1>

<p><img src="http://www.openwudi.com/images/2015/1433771186.png" alt="1433771186.png" /></p>

<p>这个新的视觉设计器暂时还没加入到Android Studio 1.3版本。令人兴奋的是，它减轻了创建UI的负担。上图展示了一个新的主题编辑器，让你通过可视化查看和修改主题文件。
并且可以预览该主题的UI控件。</p>

<p><img src="http://www.openwudi.com/images/2015/1433773948.png" alt="1433773948.png" /></p>

<p>布局编辑器也加入了一些新的功能，上图蓝色的部分可以让你只关注UI的布局。它还提供通过拖拽的方式修改组件。</p>

<p><img src="http://www.openwudi.com/images/2015/1433774256.png" alt="1433774256.png" /></p>

<p>XML预览模式已经被扩展到可以显示系统参数，但是最重要的特点是通过所见即所得的方式直接在预览窗口进行编辑，包括从工具面板拖拽控件。</p>
]]></content>
  </entry>
  
</feed>

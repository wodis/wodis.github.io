<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Open Tech Pub]]></title>
  <link href="http://wodis.github.io/atom.xml" rel="self"/>
  <link href="http://wodis.github.io/"/>
  <updated>2015-05-29T10:31:27+08:00</updated>
  <id>http://wodis.github.io/</id>
  <author>
    <name><![CDATA[Wu Di]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Learning]]></title>
    <link href="http://wodis.github.io/blog/2015/05/27/python-learning/"/>
    <updated>2015-05-27T14:23:19+08:00</updated>
    <id>http://wodis.github.io/blog/2015/05/27/python-learning</id>
    <content type="html"><![CDATA[<h1>为什么我要用Python</h1>

<p>最近整理了一下微人脉现有的脚本，整体都基于PHP编写，然后通过Crontab做定时任务。
但是，PHP来作为脚本的话，语法并不简洁，尝试使用Python。
两者比较各有优势，Python的可读性非常好，对于OO化繁为简，就语法而言PHP变量的$总容易混淆（当然可能是我主观这么认为）。
直接摘一个其他人总结的：</p>

<ul>
<li>Python is more readable, and more general purpose</li>
<li>PHP has awful backward compatibility</li>
<li>PHP has a lower barrier to entry</li>
<li>Most inexpensive web-hosters support PHP, but not Python</li>
<li>PHP has far more pre-writen scrīpts available</li>
<li>Newer versions of mod_python require Apache 2.0, which few hosters have</li>
<li>There is more demand for PHP developers, than Python developers</li>
</ul>


<h1>Python学习工程</h1>

<p><a href="https://github.com/wodis/python-learning">Github Python Project</a></p>

<p><strong>目录</strong></p>

<ol>
<li>中文编码 encoding</li>
<li>变量类型 variable</li>
<li>条件语句 decision</li>
<li>循环语句 loop</li>
<li>日期和时间 date</li>
<li>函数 function</li>
<li>文件I/O</li>
<li>HTTP</li>
<li>JSON</li>
<li>Log</li>
<li>面向对象 OOP</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx专题]]></title>
    <link href="http://wodis.github.io/blog/2015/02/19/nginxzhuan-ti/"/>
    <updated>2015-02-19T14:40:19+08:00</updated>
    <id>http://wodis.github.io/blog/2015/02/19/nginxzhuan-ti</id>
    <content type="html"><![CDATA[<p>起因：由于工作内容变化的原因，需要多了解后端所使用的技术。
但是一直没有时间去从头学习，过年在家抢红包无意间看见一篇用Nginx做代理并通过log自己动手做一个报警工具
<a href="http://mp.weixin.qq.com/s?__biz=MjM5NDMwNjMzNA==&amp;amp;amp;mid=203292077&amp;amp;amp;idx=3&amp;amp;amp;sn=815dcf56c4d60ef7251c7c18cfa0fc81&amp;amp;amp;3rd=MzA3MDU4NTYzMw==&amp;amp;amp;scene=6#rd">原文</a>。
所以这才从头开始搭一下Nginx。现在为学习Nginx做一个整合，争取过年期间快速浏览一遍。</p>

<hr />

<ul>
<li><a href="http://my.oschina.net/boonya/blog/286422">Nginx学习之一：从权威途径(wiki)了解Nginx</a></li>
<li><a href="http://my.oschina.net/boonya/blog/287189">Nginx学习之二：Nginx 学习地图梗概</a></li>
<li><a href="http://my.oschina.net/boonya/blog/287201">Nginx学习之三：对应平台的Nginx下载和安装</a></li>
<li><a href="http://my.oschina.net/boonya/blog/287265">Nginx学习之四：Nginx支持模块的安装及描述</a></li>
<li><a href="http://my.oschina.net/boonya/blog/287300">Nginx学习之五：Nginx第三方模块</a></li>
<li><a href="http://my.oschina.net/boonya/blog/287313">Nginx学习之六：Nginx配置操作导航</a></li>
<li><a href="http://my.oschina.net/boonya/blog/287322">Nginx学习之七：通过Nginx社区进行技术交流</a></li>
<li><a href="http://my.oschina.net/boonya/blog/287330">Nginx开发者学习资源攻略</a></li>
<li><a href="http://my.oschina.net/boonya/blog/288874">Nginx学习之九：实践学习指南</a></li>
<li><a href="http://my.oschina.net/boonya/blog/289423">Nginx学习之十：Nginx+Tomcat多站点访问默认主页问题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Command Line Tips]]></title>
    <link href="http://wodis.github.io/blog/2015/01/04/linux-command-line-tips/"/>
    <updated>2015-01-04T18:53:34+08:00</updated>
    <id>http://wodis.github.io/blog/2015/01/04/linux-command-line-tips</id>
    <content type="html"><![CDATA[<p>I just post some &lsquo;terminal&rsquo; things here, because I am getting tried to use GUI for my development and decide to change the method to manage Unix-based Mac OSX. As a developer, I have to shamed to say &lsquo;I am so much depend on GUI before working&rsquo;, that why this article is created.</p>

<h2>1.Try some simple</h2>

<p>date</p>

<p>cal</p>

<p>df - display free disk space</p>

<p>exit</p>

<p>man - format and display the on-line manual pages</p>

<p>which- locate a program file in the user&rsquo;s path</p>

<h2>2.Navigation</h2>

<p>pwd</p>

<p>cd</p>

<p>ls</p>

<p>file - determine file type</p>

<p>less - opposite of more</p>

<h2>3.File System</h2>

<p>cp</p>

<p>mv</p>

<p>mkdir</p>

<p>rm</p>

<h2>4.Authority and Progress</h2>

<p>chmod &ndash; change file modes or Access Control Lists</p>

<p>ps aux | grep vim</p>

<p>kill</p>

<h2>5.Search</h2>

<p>locate - find filenames quickly</p>

<p>find - walk a file hierarchy</p>

<p>grep - file pattern searcher</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于我]]></title>
    <link href="http://wodis.github.io/blog/2015/01/01/first-blog/"/>
    <updated>2015-01-01T16:07:32+08:00</updated>
    <id>http://wodis.github.io/blog/2015/01/01/first-blog</id>
    <content type="html"><![CDATA[<p><img src="http://tp2.sinaimg.cn/1690201701/50/5679941181/1" alt="my icon" /></p>

<p><strong>姓名：</strong> Di Wu</p>

<p><strong>微博：</strong> <a href="http://weibo.com/wodis">@讨厌茄子的老科特</a></p>

<p><strong>博客：</strong> <a href="http://www.openwudi.com">http://www.openwudi.com</a></p>

<p><strong>所在地：</strong> 北京</p>

<p><strong>就职于：</strong> 新浪微博</p>

<p><strong>教育经历：</strong> <code>2012~2013 Dublin City University</code>
<code>2006~2012 武汉大学</code></p>

<hr />

<p>2014年加入新浪微博，进行Java平台的研发工作，现担任新浪微博-微人脉项目工程师，完成Android客户端1.3以前版本，并切入服务器端开发到现在。2013年参加DCU的Kuali Student开源项目，经历了从调研，立项，到研发的整个过程，学业结束回国。</p>

<p>欢迎随时与我交流Android/Java开发中所遇到的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Guava Library Tips]]></title>
    <link href="http://wodis.github.io/blog/2014/09/02/google-guava-library-tips/"/>
    <updated>2014-09-02T18:58:38+08:00</updated>
    <id>http://wodis.github.io/blog/2014/09/02/google-guava-library-tips</id>
    <content type="html"><![CDATA[<h1>String</h1>

<ul>
<li>CharMatcher (which can be considered as a light form of JDK&rsquo;s Pattern+Matcher with string manipulation capabilities)</li>
<li>Joiner and MapJoiner (which are useful for joining iterables or arrays into string representations)</li>
<li>Splitter (which is split() of JDK on steroids).</li>
</ul>


<h3>CharMatcher.JAVA_LETTER_OR_DIGIT</h3>

<p>.countIn(&ldquo;&rdquo;)</p>

<p>.matchesAllOf(&ldquo;&rdquo;)</p>

<p>.matchesNoneOf(&ldquo;&rdquo;)</p>

<p>.negate()</p>

<p>.removeFrom(&ldquo;&rdquo;)</p>

<p>.retainFrom(&ldquo;&rdquo;)</p>

<p>.indexIn(&ldquo;&rdquo;)</p>

<p>.anyOf(&ldquo;&rdquo;)</p>

<p>.noneOf(&ldquo;&rdquo;)</p>

<p>.inRange(&lsquo;&rsquo;, &lsquo;&rsquo;)</p>

<p>.or(CharMatcher)</p>

<p>.and(CharMatcher)</p>

<h3>Joiner</h3>

<p>.on(&ldquo;&rdquo;)</p>

<p>.join(List)</p>

<p>.skipNulls()</p>

<p>.useForNull(&ldquo;&rdquo;)</p>

<h3>Splitter</h3>

<p>.on(&ldquo;&rdquo;)</p>

<p>.omitEmptyStrings()</p>

<p>.trimResults()</p>

<p>.split(&ldquo;&rdquo;)</p>

<p>.fixedLength(int)</p>

<h3>Strings</h3>

<p>.emptyToNull(&ldquo;&rdquo;)</p>

<p>.isNullOrEmpty(&ldquo;&rdquo;)</p>

<p>.repeat(&ldquo;&rdquo;, int)</p>

<p>.padEnd(&ldquo;&rdquo;, int, &lsquo;&rsquo;)</p>

<p>.padStart(&ldquo;&rdquo;, int, &lsquo;&rsquo;)</p>

<h1>Ordering</h1>

<p>This class is really useful if you need to order your Iterable, find the maximum/minimum element in your Iterable, find the index of an arbitrary element. It implements Comparator interface for backward compatibility..from(Comparator)</p>

<p>.sortedCopy(List)</p>

<p>.explicit(enum)</p>

<p>.usingToString()</p>

<p>.natural()</p>

<p>.binarySearch(List,Object)</p>

<p>.max(List)</p>

<p>.min(List)</p>

<p>.reverse()</p>

<p>.isOrdered()</p>

<p>.isStrictlyOrdered()</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Learning]]></title>
    <link href="http://wodis.github.io/blog/2014/07/01/git-learning/"/>
    <updated>2014-07-01T13:47:06+08:00</updated>
    <id>http://wodis.github.io/blog/2014/07/01/git-learning</id>
    <content type="html"><![CDATA[<h2>Git 工作流程</h2>

<p>一般工作流程如下：</p>

<ul>
<li>克隆 Git 资源作为工作目录。</li>
<li>在克隆的资源上添加或修改文件。</li>
<li>如果其他人修改了，你可以更新资源。</li>
<li>在提交前查看修改。</li>
<li>提交修改。</li>
<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>
</ul>


<p><img src="http://www.openwudi.com/images/2015/1432807147.png" alt="工作流程" /></p>

<h2>Git 创建仓库</h2>

<p>使用您当前目录作为Git仓库，我们只需使它初始化。</p>

<pre><code>git init
</code></pre>

<p>使用指定目录作为Git仓库。</p>

<pre><code>git init newrepo
</code></pre>

<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。
如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>

<pre><code>$ git add *.c
$ git add README
$ git commit -m 'initial project version'
</code></pre>

<h3>从现有仓库克隆</h3>

<p>克隆仓库的命令格式为：</p>

<pre><code>git clone [url]
</code></pre>

<p>比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p>

<pre><code>$ git clone git://github.com/schacon/grit.git
</code></pre>

<p>执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。
如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p>

<pre><code>$ git clone git://github.com/schacon/grit.git mygrit
</code></pre>

<h2>Git 工作区、暂存区和版本库</h2>

<p>我们先来理解下Git 工作区、暂存区和版本库概念</p>

<ul>
<li>工作区：就是你在电脑里能看到的目录。</li>
<li>暂存区：英文叫stage, 或index。一般存放在"git目录"下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li>版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>
</ul>


<p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p>

<p><img src="http://www.openwudi.com/images/2015/1432810388.jpg" alt="工作区、暂存区和版本库" /></p>

<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 &ldquo;index&rdquo; 的区域是暂存区（stage, index），标记为 &ldquo;master&rdquo; 的是 master 分支所代表的目录树。</p>

<p>图中我们可以看出此时 &ldquo;HEAD&rdquo; 实际是指向 master 分支的一个"游标"。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p>

<p>图中的 objects 标识的区域为 Git 的对象库，实际位于 &ldquo;.git/objects&rdquo; 目录下，里面包含了创建的各种对象及内容。</p>

<p>当对工作区修改（或新增）的文件执行 &ldquo;git add&rdquo; 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p>

<p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p>

<p>当执行 &ldquo;git reset HEAD&rdquo; 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p>

<p>当执行 &ldquo;git rm &ndash;cached <file>&rdquo; 命令时，会直接从暂存区删除文件，工作区则不做出改变。</p>

<p>当执行 &ldquo;git checkout .&rdquo; 或者 &ldquo;git checkout &ndash; <file>&rdquo; 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</p>

<p>当执行 &ldquo;git checkout HEAD .&rdquo; 或者 &ldquo;git checkout HEAD <file>&rdquo; 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p>

<h2>Git 基本操作</h2>

<p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。</p>

<h3>基本快照</h3>

<h4>git add</h4>

<p>git add 命令可将该文件添加到缓存，如我们添加以下两个文件：</p>

<pre><code>$ touch README
$ touch hello.php
$ ls
README      hello.php
$ git status -s
?? README
?? hello.php
$
</code></pre>

<p>git status 命令用于查看项目的当前状态。接下来我们执行 git add 命令来添加文件：</p>

<pre><code>$ git add README hello.php
</code></pre>

<p>现在我们再执行 git status，就可以看到这两个文件已经加上去了。</p>

<pre><code>$ git status -s
A  README
A  hello.php
$
</code></pre>

<p>新项目中，添加所有文件很普遍，可以在当前工作目录执行命令：git add .。
现在我们改个文件，再执行一下 git status：</p>

<pre><code>$ vim README
$ git status -s
AM README
A  hello.php
</code></pre>

<p>&ldquo;AM&rdquo; 状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们在执行 git add 命令将其添加到缓存中：</p>

<pre><code>$ git add .
$ git status -s
A  README
A  hello.php
</code></pre>

<p>当你要将你的修改包含在即将提交的快照里的时候，需要执行 git add。</p>

<h4>git status</h4>

<p>git status 以查看在你上次提交之后是否有修改。
演示该命令的时候加了 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容：</p>

<pre><code>$ git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached &lt;file&gt;..." to unstage)

    new file:   README
    new file:   hello.php
</code></pre>

<h4>git diff</h4>

<p>执行 git diff 来查看执行 git status 的结果的详细信息。
git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。</p>

<ul>
<li>尚未缓存的改动：git diff</li>
<li>查看已缓存的改动： git diff &ndash;cached</li>
<li>查看已缓存的与未缓存的所有改动：git diff HEAD</li>
<li>显示摘要而非整个 diff：git diff &ndash;stat</li>
</ul>


<p>修改 hello.php 文件中输入以下内容：</p>

<pre><code>$ git status -s
A  README
AM hello.php
$ git diff
diff --git a/hello.php b/hello.php
index e69de29..d1a9166 100644
--- a/hello.php
+++ b/hello.php
@@ -0,0 +1,3 @@
+&lt;?php
+echo 'www.openwudi.com';
+?&gt;
</code></pre>

<p>git status显示你上次提交更新至后所更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。
接下来我们来查看下 git diff &ndash;cached 的执行效果：</p>

<pre><code>$ git add hello.php
$ git status -s
A  README
A  hello.php
$ git diff --cached
diff --git a/README b/README
new file mode 100644
index 0000000..704cce7
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+openwudi.com
diff --git a/hello.php b/hello.php
new file mode 100644
index 0000000..d1a9166
--- /dev/null
+++ b/hello.php
@@ -0,0 +1,3 @@
+&lt;?php
+echo 'www.openwudi.com';
+?&gt;
</code></pre>

<h4>git commit</h4>

<p>使用 git add 命令将想要快照的内容写入了缓存， 而执行 git commit 记录缓存区的快照。
Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p>

<pre><code>$ git config --global user.name 'openwudi'
$ git config --global user.email xxx@openwudi.com
</code></pre>

<p>接下来我们写入缓存，并提交对 hello.php 的所有改动。在首个例子中，我们使用 -m 选项以在命令行中提供提交注释。</p>

<pre><code>$ git add hello.php
$ git status -s
A  README
A  hello.php
$ git commit -m 'test comment from openwudi.com'
[master (root-commit) 85fc7e7] test comment from openwudi.com
 2 files changed, 4 insertions(+)
 create mode 100644 README
 create mode 100644 hello.php
</code></pre>

<p>现在我们已经记录了快照。如果我们再执行 git status:</p>

<pre><code>$ git status
# On branch master
nothing to commit (working directory clean)
</code></pre>

<p>以上输出说明我们在最近一次提交之后，没有做任何改动，是一个"干净的工作目录"。</p>

<p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：</p>

<pre><code>git commit -a
</code></pre>

<h4>git reset HEAD</h4>

<p>git reset HEAD 命令用于取消缓存已缓存的内容。
这里我们有两个最近提交之后又有所改动的文件。我们将两个都缓存，并取消缓存其中一个。</p>

<pre><code>$ git status -s
 M README
 M hello.php
$ git add .
$ git status -s
 M  README
 M  hello.pp
$ git reset HEAD -- hello.php
 Unstaged changes after reset:
 M hello.php
$ git status -s
 M  README
 M hello.php
</code></pre>

<p>现在你执行 git commit 将只记录 README 文件的改动，并不含现在并不在缓存中的 hello.pp。</p>

<h4>git rm</h4>

<p>git rm 将文件从缓存区中移除。如我们删除 hello.php文件：</p>

<pre><code>$ git rm hello.php
rm 'hello.php'
$ ls
README
</code></pre>

<p>默认情况下，git rm file 会将文件从缓存区和你的硬盘中（工作目录）删除。 如果要在工作目录中留着该文件，可以使用命令：</p>

<pre><code>git rm --cached
</code></pre>

<h4>git mv</h4>

<p>git mv 命令做得所有事情就是 git rm &ndash;cached， 重命名磁盘上的文件，然后再执行 git add 把新文件添加到缓存区。因此，虽然有 git mv 命令，但它有点多余 。</p>

<h2>Git 分支管理</h2>

<h4>创建分支命令:</h4>

<pre><code>git branch (branchname)
</code></pre>

<h4>切换分支命令:</h4>

<pre><code>git checkout (branchname)
</code></pre>

<p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p>

<h4>合并分支命令:</h4>

<pre><code>git merge
</code></pre>

<p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p>

<h4>列出分支基本命令:</h4>

<pre><code>git branch
</code></pre>

<p>没有参数时，git branch 会列出你在本地的分支。</p>

<pre><code>$ git branch
* master
</code></pre>

<p>此例的意思就是，我们有一个叫做"master"的分支，并且该分支是当前分支。
当你执行 git init 的时候，缺省情况下 Git 就会为你创建"master"分支。
如果我们要手动创建一个分支，并切换过去。执行 git branch (branchname) 即可。</p>

<pre><code>$ git branch testing
$ git branch
* master
  testing
</code></pre>

<p>现在我们可以看到，有了一个新分支 testing。
当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了"testing"分支，Git 将还原你的工作目录到你创建分支时候的样子
接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p>

<pre><code>$ ls
README
$ echo 'openwudi.com' &gt; test.txt
$ git add .
$ git commit -m 'add test.txt'
[master 048598f] add test.txt
 2 files changed, 1 insertion(+), 3 deletions(-)
 delete mode 100644 hello.php
 create mode 100644 test.txt
$ ls
README      test.txt
$ git checkout testing
Switched to branch 'testing'
$ ls
README      hello.php
</code></pre>

<p>当我们切换到"testing"分支的时候，我们添加的新文件test.txt被移除了, 原来被删除的文件hello.php文件又出现了。切换回"master"分支的时候，它们有重新出现了。</p>

<pre><code>$ git checkout master
Switched to branch 'master'
$ ls
README      test.txt
</code></pre>

<p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p>

<pre><code>$ git checkout -b newtest
Switched to a new branch 'newtest'
$ git rm test2.txt
rm 'test2.txt'
$ ls
README      test.txt
$ git commit -am 'removed test2.txt'
[newtest 556f0a0] removed test2.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test2.txt
$ git checkout master
Switched to branch 'master'
$ ls
README      test.txt    test2.txt
</code></pre>

<p>如你所见，我们创建了一个分支，在该分支的上下文中移除了一些文件，然后切换回我们的主分支，那些文件又回来了。
使用分支将工作切分开来，从而让我们能够在不同上下文中做事，并来回切换。</p>

<h4>删除分支命令:</h4>

<pre><code>git branch -d (branchname)
</code></pre>

<h4>分支合并:</h4>

<pre><code>git merge
</code></pre>

<h4>合并冲突:</h4>

<p>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。</p>

<pre><code>$ git branch
* master
$ cat test.txt
openwudi.com
</code></pre>

<p>首先，我们创建一个叫做"change_site"的分支，切换过去，我们将内容改为 www.openwudi.com 。</p>

<pre><code>$ git checkout -b change_site
Switched to a new branch 'change_site'
$ vim test.txt
$ head -1 test.txt
www.openwudi.com
$ git commit -am 'changed the site'
[change_site d7e7346] changed the site
 1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre>

<p>将修改的内容提交到 &ldquo;change_site&rdquo; 分支中。 现在，假如切换回 &ldquo;master&rdquo; 分支我们可以看内容恢复到我们修改前的，我们再次修改test.txt文件。</p>

<pre><code>$ git checkout master
Switched to branch 'master'
$ head -1 test.txt
openwudi.com
$ vim test.txt
$ cat test.txt
openwudi.com
新增加一行
$ git diff
diff --git a/test.txt b/test.txt
index 704cce7..f84c2a4 100644
--- a/test.txt
+++ b/test.txt
@@ -1 +1,2 @@
 openwudi.com
+新增加一行
$ git commit -am '新增加一行'
[master 14b4dca] 新增加一行
 1 file changed, 1 insertion(+)
</code></pre>

<p>现在这些改变已经记录到我的 &ldquo;master&rdquo; 分支了。接下来我们将 &ldquo;change_site&rdquo; 分支合并过来。</p>

<pre><code>$ git merge change_site
Auto-merging test.txt
CONFLICT (content): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.
$ cat test.txt
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
openwudi.com
新增加一行
=======
www.openwudi.com
&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site
</code></pre>

<p>我们将前一个分支合并到 &ldquo;master&rdquo; 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。</p>

<pre><code>$ vim test.txt
$ cat test.txt
www.openwudi.com
新增加一行
$ git diff
diff --cc test.txt
index f84c2a4,bccb7c2..0000000
--- a/test.txt
+++ b/test.txt
@@@ -1,2 -1,1 +1,2 @@@
- openwudi.com
+ www.openwudi.com
 +新增加一行
</code></pre>

<p>在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决</p>

<pre><code>$ git status -s
UU test.txt
$ git add test.txt 
$ git status -s
M  test.txt
$ git commit
[master 88afe0e] Merge branch 'change_site'
</code></pre>

<p>现在我们成功解决了合并中的冲突，并提交了结果。</p>

<h2>Git分支模型图</h2>

<p><img src="http://www.openwudi.com/images/2015/1432791784.png" alt="git branch" /></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Open Tech Pub]]></title>
  <link href="http://wodis.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://wodis.github.io/"/>
  <updated>2015-07-05T21:04:10+08:00</updated>
  <id>http://wodis.github.io/</id>
  <author>
    <name><![CDATA[Wu Di]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android深入理解Service]]></title>
    <link href="http://wodis.github.io/blog/2015/07/04/android-service-shen-ru-li-jie/"/>
    <updated>2015-07-04T21:16:11+08:00</updated>
    <id>http://wodis.github.io/blog/2015/07/04/android-service-shen-ru-li-jie</id>
    <content type="html"><![CDATA[<h1>Service</h1>

<p>官方文档给出的解释为。Service是一个无界面，长时间在后台运行的应用组件。
其他的应用组件可以启动一个Service，即使用户切换到其他应用后Service任然在后台运行。
另外，组件可以通过绑定(Bind)的方式与Service进行交互，甚至使用Interprocess Communication(IPC)的方式。</p>

<p>Service基本上可以采取两种形式：</p>

<p>Started</p>

<p>当一个组件调用startService()方法后，Service将启动。一旦被启动，无论启动它的组件是否被销毁，Service都会在后台运行。
这种方式通常为了执行一个单独的操作，并且我们不需要Service返回状态。</p>

<p>Bound</p>

<p>当一个组件调用bindService()方法后，Service提供了一个接口使得可以与组件进行交互。包括发送请求，获得结果，甚至进程间通信IPC。</p>

<p>一般会分开讨论这两种Service的启动类型，但我们可以使Service在这两种方式下运行。这取决于你是否实现了一对回调方法：onStartCommand()允许组件启动；onBind()允许组件绑定。</p>

<p><code>值得注意的是Service是运行在主线程中的，这意味着Service不能创建它自己的线程，也不能运行在其他进程中（除非特别指定）。一旦你需要做一些消耗CPU的工作或者阻塞操作，你应该在Service中创建一个新的线程去完成。</code></p>

<p><strong>何时使用Service或者Thread：</strong>Service因为是Android中的一个组件，会一直在后台运行，请确认是否需要一个常驻的功能。Thread通常是处理一个异步的任务，任务执行完就不再需要，它避免阻塞主线程。</p>

<h1>Service常用基类</h1>

<h3>Service</h3>

<p>这是所有服务类的基类，继承该类，对于在服务中创建新线程很重要。因为默认服务使用应用的主线程，可能会降低程序的性能。</p>

<h3>IntentService</h3>

<p>这是一个Service的子类，该子类使用线程处理所有启动请求，一次一个。这是不使用服务处理多任务请求的最佳选择。你需要做的只是实现onHandleIntent()方法即可。可以为每个启动请求接收到intent，放到后台工作即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google I/O回顾:Android开发工具的新玩意]]></title>
    <link href="http://wodis.github.io/blog/2015/06/08/android-xin-kai-fa-gong-ju/"/>
    <updated>2015-06-08T12:52:33+08:00</updated>
    <id>http://wodis.github.io/blog/2015/06/08/android-xin-kai-fa-gong-ju</id>
    <content type="html"><![CDATA[<p>每年我们都在期待Google I/O大会中Android相关的新东西。然而，在线看视频简直太花时间了（拜GFW所赐还得使用一些小手段观看）。
这篇文章对整个视频做了总结，希望可以帮到大家。</p>

<h1>Easing Design</h1>

<p><img src="http://www.openwudi.com/images/2015/1433733652.png" alt="1433733652.png" /></p>

<p><a href="http://android-developers.blogspot.co.at/2015/05/android-design-support-library.html">Android Design Support Library</a>
可以帮你遵循最新的Material Design风格。这个库包含了一系列Material Design组件，
例如Navigation Drawer、Floating Labels for Editing Text、Floating Action Buttons和Snackbar，
所有的组件都兼容Android 2.1以上版本。</p>

<p><img src="http://www.openwudi.com/images/2015/1433733704.png" alt="1433733704.png" /></p>

<p>Android L已经介绍了Vector Drawables。随着Android Studio 1.3更改了Android Gradle插件，我们可以使用编译系统通过SVG和Vector Drawables生成不同dp的raster图像。</p>

<p>最终，开发工具团队开始重写了整个可视化设计编辑器、它帮你实现更多所见即所得的方式。</p>

<h1>Improving the Grade Plugin &amp; Build System</h1>

<p><img src="http://www.openwudi.com/images/2015/1433736364.png" alt="1433736364.png" /></p>

<p>Android Gradle插件有时会靠不住，特别是它作为依赖管理，相关问题已经得到了修复。</p>

<p>Android Gradle插件最令人纠结的当然是超长的编译时间。工具团队从多个层面去解决这个问题。
<a href="http://tools.android.com/tech-docs/jackandjill">Jack</a>，Java Android Compiler Kit的缩写，
它将Java源码直接编译成Android的Dex文件格式。它是基于Eclispse Java编译器的，这个过程减少了一步。换句话说就是，不需要在转成Dex前编译成JVM字节码。另外，它还支持增量编译。</p>

<p>压缩处理PNG图片同样花费了巨大的时间。工具团队已经提升了这方面的性能，将500张PNG和.9图从4秒减低到400毫秒。</p>

<p>aapt(Android Asset Packaging Tool)，负责打包所有的Dex和资源文件，同样也得到了优化。</p>

<p>另外一个开销是因为Gradle自己造成的，当Gradle开始编译Android项目的时候，它不得不创建一个模块去描述variants(flavor + build type)，
即使只打算构建一个，它也会解析所有variants的依赖。并且它会执行自定义的逻辑。开发团队使用Gradle Ware优化了这些步骤。这是结果：</p>

<p><img src="http://www.openwudi.com/images/2015/1433743364.png" alt="1433743364.png" /></p>

<p>当然，还没有说完。开发工具团队正在致力于新的Android Gradle插件，它基于Gradle Ware新的API。
新的API允许Gradle直接管理模块，并且可以让它做一些事情，比如缓存、并行和增量构建。这是下一代插件的结果：</p>

<p><img src="http://www.openwudi.com/images/2015/1433744540.png" alt="1433744540.png" /></p>

<p>这些数字并不包括缓存的优化，因为它还没开发完成。但它有一个小缺点，就是新插件使用新的DSL，而且还不能向下兼容。预览版将在几周后放出，但是正式版可能会在年末。</p>

<p>开发工具团队也介绍了一个Data Binding Library。它需要构建系统的支持，因为它会从XML文件声明中生成Java源文件。老版和新版的Android Gradle插件都可以支持。Android Studio还开始支持C/C++进行NDK开发。</p>

<h1>Testing</h1>

<p><img src="http://www.openwudi.com/images/2015/1433747802.svg" alt="1433747802.png" /></p>

<p>今年Android测试新发布了<a href="https://developers.google.com/cloud-test-lab/">Cloud Test lab</a>。
它允许你使用Google测试云上的虚拟设备和物理设备进行app测试。并支持自动抓取，不需求自己写用例，当然如果你愿意也是支持的。</p>

<h1>Emulator</h1>

<p><img src="http://www.openwudi.com/images/2015/1433748302.png" alt="1433748302.png" /></p>

<p>模拟器上并没有什么太多的变化，开发工具团队主要致力于稳定、正确性和可配置。Android Studio将下载并安装HAXM，性能上有很大的提升。
Android Auto模拟器中将会提供指纹识别的支持。</p>

<h1>New Support Annotations</h1>

<p><img src="http://www.openwudi.com/images/2015/1433748585.png" alt="1433748585.png" /></p>

<p>Java注解可以在编译和运行时进行很多神奇的事情。新增了13种注解可以帮助你避免一些Bug。</p>

<p>例如，@WorkerThread注解。方法中声明此注解会自动检查代码是否在UI线程。Android Studio会高亮显示错误。</p>

<p>另一个例子是，@RequiresPermission。一旦你使用的API没有在manifest文件中声明权限，Android Studio将会提醒你插入权限。
在Android M中权限控制有了一些变化，用户可以选择同意和拒绝某种权限，这意味着你的代码不得不去处理拒绝后的逻辑。
Android Studio将自动产生一个代码块帮助你完成这件事。</p>

<h1>Data Binding</h1>

<p><img src="http://www.openwudi.com/images/2015/1433750019.png" alt="1433750019.png" /></p>

<p>这个可能是给开发者印象最深的变化。当你开发Android的UI时，通常使用findViewByID()查找XML文件中的布局，并将Java POJO填充到里面。
Data Binding库可以让这个操作变简单。你可以声明POJO类型，变量表达式引用POJO，以及监听XML文件的布局，用来代替原来手动的操作。
在编译时期，构建系统会生成绑定的Java类，关联你的布局和POJO。</p>

<p>使用它只需要两步：POJO实现<code>android.databindings.Observable</code>接口，改变POJO则会反射到UI，反之亦然。
Data Binding库当前还属于beta阶段，需要Android Studio 1.3版本和最新的Gradle插件。更多内容请参考
<a href="https://developer.android.com/tools/data-binding/guide.html">https://developer.android.com/tools/data-binding/guide.html</a></p>

<h1>Profiling Tools</h1>

<p><img src="http://www.openwudi.com/images/2015/1433770237.png" alt="1433770237.png" /></p>

<p>这个内存和性能分析工具做了一些优化。你现在可以查看在Android Studio中堆和方法路径的快照，通过一个下拉的界面，你可以发现问题在哪。
它还能可视化的查看和跟踪，你不需要手动的生成<a href="http://docs.oracle.com/javase/7/docs/technotes/samples/hprof.html">HPROF</a>文件。</p>

<p><img src="http://www.openwudi.com/images/2015/1433770818.png" alt="1433770818.png" /></p>

<p>现在内存快照是下拉显示的，看起来非常简洁。通过调试器可以查看当前的对象。它也可以让你去追踪引用链直到GC的根节点，这样你就可以知道谁持有了垃圾的引用。</p>

<h1>New Features in Upcoming Releases</h1>

<p><img src="http://www.openwudi.com/images/2015/1433771186.png" alt="1433771186.png" /></p>

<p>这个新的视觉设计器暂时还没加入到Android Studio 1.3版本。令人兴奋的是，它减轻了创建UI的负担。上图展示了一个新的主题编辑器，让你通过可视化查看和修改主题文件。
并且可以预览该主题的UI控件。</p>

<p><img src="http://www.openwudi.com/images/2015/1433773948.png" alt="1433773948.png" /></p>

<p>布局编辑器也加入了一些新的功能，上图蓝色的部分可以让你只关注UI的布局。它还提供通过拖拽的方式修改组件。</p>

<p><img src="http://www.openwudi.com/images/2015/1433774256.png" alt="1433774256.png" /></p>

<p>XML预览模式已经被扩展到可以显示系统参数，但是最重要的特点是通过所见即所得的方式直接在预览窗口进行编辑，包括从工具面板拖拽控件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发中提升Gradle性能]]></title>
    <link href="http://wodis.github.io/blog/2015/06/02/ti-sheng-gradle-xing-neng/"/>
    <updated>2015-06-02T11:42:39+08:00</updated>
    <id>http://wodis.github.io/blog/2015/06/02/ti-sheng-gradle-xing-neng</id>
    <content type="html"><![CDATA[<p>是不是感觉一整天都在等着Android Studio编译完成？我也是</p>

<p>幸亏现在有方法让编译速度提升一些。虽然这些操作仍然有一定的风险，但还是值得尝试一下。
当我修改了一小部分的代码后，使用这个方法，编译速度直接减少了2.5秒。</p>

<p>Android现在通常使用Gradle进行编译。发布这篇文章的时候，默认的Gradle版本是2.2。
最新的为2.4，它比之前的版本已经有了很大的提升。</p>

<p>有两种方法配制新版Gradle，直接手动修改build脚本，或者更改Android Studio的配置。</p>

<p>1.手动修改build脚本，通过在项目根目录的build.grade中添加以下代码</p>

<pre><code>task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}
</code></pre>

<p>现在打开终端并且运行./gradlew，它会自动下载并安装Gradle 2.4作为本地版本。
<a href="http://gradle.org/docs/current/userguide/gradle_wrapper.html">官方文档</a></p>

<p>2.如果打算修改Android Studio的配制，需要打开Project Structure Dialog（OS X: ⌘+;），
在左边的列表中选择Project，然后修改Gradle version为2.4。单击OK，Android Studio会自动安装和同步Gradle的配置。</p>

<p><img src="http://www.openwudi.com/images/2015/1433219043.png" alt="1433219043.png" /></p>

<p>下一步是确保Gradle守护进程和并行编译可用。使用守护进程编译速度会提高，因为它并不会每次都编译完整的项目。
并行编译会将项目分成多模块编译，这样可以提升大型多模块项目的编译速度。</p>

<p>当然这些设置需要添加到.gradle目录的gradle.properties中。(i.e., ~/.gradle/gradle.properties)</p>

<pre><code>org.gradle.daemon=true
org.gradle.parallel=true
</code></pre>

<p>守护进程已经在Android Studio中开启，这样做是为了在终端中使用。</p>

<p>注意：并行编译可能导致一些项目不安全。原因是需要你所有的项目是解耦的，不然会编译失败。<a href="http://gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects">多模块编译</a>
认真测试所有的build variants，保证都可以正常工作。</p>

<p>添加以下代码可以增加JVM的最大堆内存：</p>

<pre><code>org.gradle.jvmargs=-Xmx768m
org.gradle.java.home=/path/to/jvm
</code></pre>

<p>其他的gradle.properties配制，可以参考<a href="http://gradle.org/docs/current/userguide/userguide_single.html#sec:gradle_configuration_properties">官方文档</a>。</p>

<p>最后的更改是增量打包dex，这是一个实验性的功能，默认是不开启的。它可能会导致你编译失败，但是还是建议你去试一下，看看你能否使用。</p>

<p>增加以下代码到app模块的build.gradle中：</p>

<pre><code>dexOptions {
        incremental true
}
</code></pre>

<p>如果你有其他的技巧欢迎与我交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发中的MVVM模式]]></title>
    <link href="http://wodis.github.io/blog/2015/06/01/mvvm-mo-shi/"/>
    <updated>2015-06-01T18:27:14+08:00</updated>
    <id>http://wodis.github.io/blog/2015/06/01/mvvm-mo-shi</id>
    <content type="html"><![CDATA[<p>从去年开始我们的Android项目就已经从传统的MVC架构切换为Model-View-Presenter（MVP）架构，使得整个分层更加清晰。
Presenter作为整个逻辑的控制者，与Controller的区别在于它并不包含任何的显示逻辑，只处理网络请求和数据填充操作，
并通知View何时更新，当View收到更新请求，将数据根据需求展示在不同View中。</p>

<p>今年的Google IO为Android开发者介绍了一个非常棒的新框架，允许将视图绑定（Binding）到任意对象的成员变量上。
当成员变量更新，框架会通知视图 <strong>自动更新</strong>。</p>

<p>这个系统相当强大，让我们可以使用一种在Windows世界常见的开发模式Model-View-ViewModel (MVVM)。
我们先熟悉一下基本的概念，对于整个架构的理解很重要，并且看它如何使你的app更好。</p>

<p><img src="http://www.openwudi.com/images/2015/1433142732.png" alt="MVVM设计模式" /></p>

<p>MVVM设计模式包含3部分：</p>

<ul>
<li>Model – 表示你的业务逻辑</li>
<li>View – 显示的内容</li>
<li>ViewModel – 将View和Model联系到一起</li>
</ul>


<p>ViewModel接口做两件事：行为(Actions)和数据(Data)。行为改变底层的模型（点击事件，文本变化事件等），数据则表示这个模型的内容。</p>

<p>例如，一个拍卖系统的ViewModel数据可能是图片、标题、描述和价格。行为可能是竞拍、购买、或者联系卖家。</p>

<p>传统的Android架构中，控制器（Controller）将数据直接赋值给View，再从Activity中找到View，更新内容。
使用MVVM模式，ViewModel改变内容并通知绑定（Binding）框架内容已经变化。框架将会自动更新被绑定的View。
这两个容器只通过数据接口和命令进行松散耦合。</p>

<p>除了看起来智能的View绑定，也让测试变得方便。</p>

<p>因为ViewModel并不依赖于View，你可以只测试一个ViewModel，甚至不需要View存在。通过适当的依赖注入，测试就很简单了。</p>

<p>希望你已经理解了MVVM模式的基本概念，并且已经了解使用它的好处。后续我会发布实现MVVM的代码，和一些绑定框架的使用技巧。</p>

<p>参考资料：</p>

<ol>
<li><a href="http://www.codeproject.com/Articles/66585/Comparison-of-Architecture-presentation-patterns-M">Comparison of Architecture presentation patterns MVP(SC),MVP(PV),PM,MVVM and MVC</a></li>
<li><a href="http://konmik.github.io/introduction-to-model-view-presenter-on-android.html?utm_source=Android+Weekly&amp;utm_campaign=5589504b56-Android_Weekly_148&amp;utm_medium=email&amp;utm_term=0_4eb677ad19-5589504b56-337845481">Introduction to Model-View-Presenter on Android</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Tips Round-Up]]></title>
    <link href="http://wodis.github.io/blog/2014/06/27/android-tips-round-up/"/>
    <updated>2014-06-27T15:20:27+08:00</updated>
    <id>http://wodis.github.io/blog/2014/06/27/android-tips-round-up</id>
    <content type="html"><![CDATA[<p><a href="http://developer.android.com/reference/android/app/Activity.html#startActivities(android.content.Intent[])">Activity.startActivities()</a> - Nice for launching to the middle of an app flow.</p>

<p><a href="http://developer.android.com/reference/android/text/TextUtils.html#isEmpty(java.lang.CharSequence)">TextUtils.isEmpty()</a> - Simple utility I use everywhere.</p>

<p><a href="http://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String)">Html.fromHtml()</a> - Quick method for formatting Html. It&rsquo;s not particularly fast so I wouldn&rsquo;t use it constantly (e.g., don&rsquo;t use it just to bold part of a string - construct the Spannable manually instead), but it&rsquo;s fine for rendering text obtained from the web.</p>

<p><a href="http://developer.android.com/reference/android/widget/TextView.html#setError%28java.lang.CharSequence%29">TextView.setError()</a> - Nice UI when validating user input.</p>

<p><a href="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html">Build.VERSION_CODES</a> - Not only is it handy for routing code, it&rsquo;s also summarizes behavioral differences between each version of Android.</p>

<p><a href="http://developer.android.com/reference/android/util/Log.html#getStackTraceString(java.lang.Throwable)">Log.getStackTraceString()</a> - Convenience utility for logging.</p>

<p><a href="http://developer.android.com/reference/android/view/LayoutInflater.html#from%28android.content.Context%29">LayoutInflater.from()</a> - Wraps the long-winded getSystemService() call in a simple utility.</p>

<p><a href="http://developer.android.com/reference/android/view/ViewConfiguration.html#getScaledTouchSlop%28%29">ViewConfiguration.getScaledTouchSlop()</a> - Using the values provided in ViewConfiguration ensures all touch interaction feels consistent across the OS.</p>

<p><a href="http://developer.android.com/reference/android/telephony/PhoneNumberUtils.html#convertKeypadLettersToDigits%28java.lang.String%29">PhoneNumberUtils.convertKeypadLettersToDigits</a> - Makes handling phone number data a snap, as some companies provide them as letters.</p>

<p><a href="http://developer.android.com/reference/android/content/Context.html#getCacheDir%28%29">Context.getCacheDir()</a> - Use the cache dir for caching data. Simple enough but some don&rsquo;t know it exists.</p>

<p><a href="http://developer.android.com/reference/android/animation/ArgbEvaluator.html">ArgbEvaluator</a> - Transition from one color to another. As was pointed out by Chris Banes, this class creates a lot of autoboxing churn so it&rsquo;d be better to just rip out the logic and run it yourself.</p>

<p><a href="http://developer.android.com/reference/android/view/ContextThemeWrapper.html">ContextThemeWrapper</a> - Nice class for changing the theme of a Context on the fly.</p>

<p><a href="http://developer.android.com/reference/android/widget/Space.html">Space</a> - Lightweight View which skips drawing. Great for any situation that might require a placeholder.</p>

<p><a href="http://developer.android.com/reference/android/animation/ValueAnimator.html#reverse%28%29">ValueAnimator.reverse()</a> - I love this for canceling animations smoothly.</p>

<p><a href="http://developer.android.com/reference/android/text/format/DateUtils.html#formatDateTime%28android.content.Context,%20long,%20int%29">DateUtils.formatDateTime()</a> - One-stop shop for localized date/time strings.</p>

<p><a href="http://developer.android.com/reference/android/app/AlarmManager.html#setInexactRepeating(int,long,long,android.app.PendingIntent)">AlarmManager.setInexactRepeating</a> - Saves on battery life by grouping multiple alarms together. Even if you&rsquo;re only calling a single alarm this is better (just make sure to call AlarmManager.cancel() when done).</p>

<p><a href="http://developer.android.com/reference/android/text/format/Formatter.html#formatFileSize(android.content.Context,long)">Formatter.formatFileSize()</a> - A localized file size formatter.</p>

<p><a href="http://developer.android.com/reference/android/app/ActionBar.html#hide()">ActionBar.hide()/.show()</a> - Animates the action bar hiding/showing. Lets you switch to full-screen gracefully.</p>

<p><a href="http://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.text.Spannable,int)">Linkify.addLinks()</a> - If you need to control how links are added to text.</p>

<p><a href="http://developer.android.com/reference/android/text/StaticLayout.html">StaticLayout</a> - Useful for measuring text that you&rsquo;re about to render into a custom View.</p>

<p><a href="http://developer.android.com/reference/android/app/Activity.html#onBackPressed()">Activity.onBackPressed()</a> - Easy way to manage the back button. While I wouldn&rsquo;t normally hijack back, sometimes it&rsquo;s necessary to make a flow work.</p>

<p><a href="http://developer.android.com/reference/android/view/GestureDetector.html">GestureDetector</a> - Listens to motion events and fires listener events for common actions (like clicks, scrolls and flings). So much easier than implementing your own motion event system.</p>

<p><a href="http://developer.android.com/reference/android/graphics/DrawFilter.html">DrawFilter</a> - Lets you manipulate a Canvas even if you&rsquo;re not calling the draw commands. For example, you could create a custom View which sets a DrawFilter which anti-aliases the draws of the parent View.</p>

<p><a href="http://developer.android.com/reference/android/app/ActivityManager.html#getMemoryClass()">ActivityManager.getMemoryClass()</a> - Gives you an idea of how much memory the device has. Great for figuring out how large to make your caches.</p>

<p><a href="http://developer.android.com/reference/android/os/SystemClock.html#sleep(long)">SystemClock.sleep()</a> - Convenience method which guarantees sleeping the amount of time entered. I use it for debugging and simulating network delays.</p>

<p><a href="http://developer.android.com/reference/android/view/ViewStub.html">ViewStub</a> - A View that initially does nothing, but can later inflate a layout. This is a great placeholder for lazy-loading Views. Its only drawback is that it doesn&rsquo;t support <merge> tags, so it can create unnecessary nesting in the hierarchy if you&rsquo;re not careful.</p>

<p><a href="http://developer.android.com/reference/android/util/DisplayMetrics.html#density">DisplayMetrics.density</a> - You can get the density of the screen this way. Most of the time you&rsquo;ll be better off letting the system scale dimensions automatically, but occasionally it&rsquo;s useful to have more control (especially with custom Views).</p>

<p><a href="http://developer.android.com/reference/android/util/Pair.html#create(A,B)">Pair.create()</a> - Handy class, handy creator method.</p>

<p><a href="http://developer.android.com/reference/android/net/UrlQuerySanitizer.html">UrlQuerySanitizer</a> - Sanitize URLs with this handy utility.</p>

<p><a href="http://developer.android.com/reference/android/app/Fragment.html#setArguments%28android.os.Bundle%29">Fragment.setArguments</a> - Since you can&rsquo;t use a Fragment constructor w/ parameters this is the second best thing. Arguments set before creation last throughout the entire Fragment&rsquo;s lifecycle (even if it&rsquo;s destroyed/recreated due to a configuration change).</p>

<p><a href="http://developer.android.com/reference/android/app/DialogFragment.html#setShowsDialog%28boolean%29">DialogFragment.setShowsDialog()</a> - Neat trick - DialogFragments can act like normal Fragments! That way you can have the same Fragment do double-duty. I usually create a third View generation method that both onCreateView() and onCreateDialog() call into when creating a dual-purpose Fragment.</p>

<p><a href="http://developer.android.com/reference/android/app/FragmentManager.html#enableDebugLogging%28boolean%29">FragmentManager.enableDebugLogging()</a> - Help when you need it when figuring out Fragments.</p>

<p><a href="http://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager.html">LocalBroadcastManager</a> - Safer than global broadcasts. Simple and quick. Event buses like otto may make more sense for your use case though.</p>

<p><a href="http://developer.android.com/reference/android/telephony/PhoneNumberUtils.html#formatNumber%28java.lang.String%29">PhoneNumberUtils.formatNumber()</a> - Let someone else figure out this problem for you.</p>

<p><a href="http://developer.android.com/reference/android/graphics/Region.html#op%28android.graphics.Region,%20android.graphics.Region,%20android.graphics.Region.Op%29">Region.op()</a> - I found this useful for comparing two generic areas before rendering. If I&rsquo;ve got two Paths, do they overlap? I can figure that out with this method.</p>

<p><a href="http://developer.android.com/reference/android/app/Application.html#registerActivityLifecycleCallbacks%28android.app.Application.ActivityLifecycleCallbacks%29">Application.registerActivityLifecycleCallbacks</a> - Though lacking documentation I feel this is self-evident. Just a handy tool.</p>

<p><a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Types">versionNameSuffix</a> - This gradle setting lets you modify the versionName field in your manifest based on different build types. For example, I would setup my debug build type to end in &ldquo;-SNAPSHOT&rdquo;; that way you can easily tell if you&rsquo;re on a debug build or release build.</p>

<p><a href="http://developer.android.com/reference/android/database/CursorJoiner.html">CursorJoiner</a> - If you&rsquo;re using a single database then a join in SQL is the natural solution, but what if you&rsquo;ve received data from two separate ContentProviders? In that case CursorJoiner can be helpful.</p>

<p><a href="http://www.genymotion.com/">Genymotion</a> - A much faster Android emulator. I use it all day.</p>

<p><a href="http://developer.android.com/guide/practices/screens_support.html#qualifiers">-nodpi</a> - Most qualifiers (-mdpi, -hdpi, -xhdpi, etc.) automatically scale assets/dimensions if you&rsquo;re on a device that isn&rsquo;t explicitly defined. Sometimes you just want something consistent though; in that case use -nodpi.</p>

<p><a href="http://developer.android.com/reference/android/content/BroadcastReceiver.html#setDebugUnregister%28boolean%29">BroadcastRecevier.setDebugUnregister()</a> - Another handy debugging tool.</p>

<p><a href="http://developer.android.com/reference/android/app/Activity.html#recreate%28%29">Activity.recreate()</a> - Forces an Activity to recreate itself for whatever reason.</p>

<p><a href="http://developer.android.com/reference/android/content/pm/PackageManager.html#checkSignatures%28java.lang.String,%20java.lang.String%29">PackageManager.checkSignatures()</a> - You can use this to find out if two apps (presumably your own) are installed at the same time. Without checking signatures someone could imitate your app easily by just using the same package name.</p>

<p><a href="http://developer.android.com/reference/android/app/Activity.html#isChangingConfigurations%28%29">Activity.isChangingConfigurations()</a> - Often times you don&rsquo;t need to do quite as much saving of state if all that&rsquo;s happening is the configuration is changing.</p>

<p><a href="http://developer.android.com/reference/android/content/SearchRecentSuggestionsProvider.html">SearchRecentSuggestionsProvider</a> - A quick and easy way to create a recents suggestion provider.</p>

<p><a href="http://developer.android.com/reference/android/view/ViewTreeObserver.html">ViewTreeObserver</a> - This is an amazing utility; it can be grabbed from any View and used to monitor the state of the View hierarchy. My most often use for it is to determine when Views have been measured (usually for animation purposes).</p>

<p><a href="https://www.timroes.de/2013/09/12/speed-up-gradle/">org.gradle.daemon=true</a> - Helps reduce the startup time of of Gradle builds. Only really applies to command-line builds as Android Studio already tries to use the daemon.</p>

<p><a href="http://developer.android.com/reference/android/database/DatabaseUtils.html">DatabaseUtils</a> - A variety of useful tools for database operations.</p>

<p><a href="http://developer.android.com/reference/android/widget/LinearLayout.html#attr_android:weightSum">android:weightSum (LinearLayout)</a> - Want to use layout weights, but don&rsquo;t want them to fill the entire LinearLayout? That&rsquo;s what weightSum can do by defining the total weight.</p>

<p><a href="http://developer.android.com/reference/android/view/View.html#attr_android:duplicateParentState">android:duplicateParentState (View)</a> - Makes the child duplicate the state of the parent - for example, if you&rsquo;ve got a ViewGroup that is clickable, then you can use this to make its children change state when it is clicked.</p>

<p><a href="http://developer.android.com/reference/android/view/ViewGroup.html#attr_android:clipChildren">android:clipChildren (ViewGroup)</a> - If disabled, this lets the children of a ViewGroup draw outside their parent&rsquo;s bounds. Great for animations.</p>

<p><a href="http://developer.android.com/reference/android/widget/ScrollView.html#attr_android:fillViewport">android:fillViewport (ScrollView)</a> - Best explained in this post, this helps solve a problem with ScrollViews that may not always have enough content to actually fill the height of the screen.</p>

<p><a href="http://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap">android:tileMode (BitmapDrawable)</a> - Lets you create repeated patterns with images.</p>

<p><a href="http://developer.android.com/reference/android/R.attr.html#exitFadeDuration">android:enterFadeDuration/android:exitFadeDuration (Drawables)</a> - For Drawables that have multiple states, this lets you define a fade before/after the drawable shows.</p>

<p><a href="http://developer.android.com/reference/android/widget/ImageView.html#attr_android:scaleType">android:scaleType (ImageView)</a> - Defines how to scale/crop a drawable within an ImageView. &ldquo;centerCrop&rdquo; and &ldquo;centerInside&rdquo; are regular settings for me.</p>

<p><a href="http://developer.android.com/training/improving-layouts/reusing-layouts.html#Merge"><merge></a> - Lets you include a layout in another without creating a duplicate ViewGroup (more info). Also good for custom ViewGroups; you can inflate a layout with <merge> inside the constructor to define its children automatically.</p>

<p><a href="http://developer.android.com/reference/android/util/AtomicFile.html">AtomicFile</a> - Manipulates a file atomically by using a backup file. I&rsquo;ve written this myself before, it&rsquo;s good to have an official (and better-written) version of it.</p>

<p><a href="https://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.html">ViewDragHelper</a> - Dragging Views is a complex problem and this class helps a lot. If you want an example, DrawerLayout uses it for swiping. Flavient Laurent also wrote an excellent article about it.</p>

<p><a href="https://developer.android.com/reference/android/widget/PopupWindow.html">PopupWindow</a> - Used all around Android without you even realizing it (action bars, autocomplete, edittext errors), this class is the primary method for creating floating content.</p>

<p><a href="https://developer.android.com/reference/android/app/ActionBar.html#getThemedContext()">ActionBar.getThemedContext()</a> - ActionBar theming is surprisingly complex (and can be different from the theming of the rest of the Activity). This gets you a Context so if you create your own Views they will be properly themed.</p>

<p><a href="https://developer.android.com/reference/android/media/ThumbnailUtils.html">ThumbnailUtils</a> - Helps create thumbnails; in general I&rsquo;d just use whatever image library was already in place (e.g. Picasso or Volley), but it can also create video thumbnails!</p>

<p><a href="https://developer.android.com/reference/android/content/Context.html#getExternalFilesDir(java.lang.String)">Context.getExternalFilesDir()</a> - While you do have permission to write anywhere on the SD card if you ask for it, it&rsquo;s much more polite to write your data in the correct designated folder. That way it gets cleaned up and users get a common experience. Additionally, as of Kit Kat you can write to this folder without permission, and each user has their own external files dir.</p>

<p><a href="https://developer.android.com/reference/android/util/SparseArray.html">SparseArray</a> - A more efficient version of Map&lt;Integer, Object>. Be sure to check out sister classes SparseBooleanArray, SparseIntArray and SparseLongArray as well.</p>

<p><a href="https://developer.android.com/reference/android/content/pm/PackageManager.html#setComponentEnabledSetting(android.content.ComponentName,int,int)">PackageManager.setComponentEnabledSetting()</a> - Lets you enable/disable components in your app&rsquo;s manifest. What&rsquo;s nice here is being able to shut off unnecessary functionality - for example, a BroadcastReceiver that is unnecessary due to the current app configuration.</p>

<p><a href="https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#yieldIfContendedSafely()">SQLiteDatabase.yieldIfContendedSafely()</a> - Lets you temporarily stop a db transaction so you don&rsquo;t tie up too much of the system.</p>

<p><a href="https://developer.android.com/reference/android/os/Environment.html#getExternalStoragePublicDirectory(java.lang.String)">Environment.getExternalStoragePublicDirectory()</a> - Again, users like a consistent experience with their SD card; using this method will grab the correct directory for placing typed files (music, pictures, etc.) on their drive.</p>

<p><a href="https://developer.android.com/reference/android/view/View.html#generateViewId()">View.generateViewId()</a> - Every once in a while I&rsquo;ve wanted to dynamically generate view IDs. The problem is ensuring you aren&rsquo;t clobbering existing IDs (or other generated ones).</p>

<p><a href="https://developer.android.com/reference/android/app/ActivityManager.html#clearApplicationUserData()">ActivityManager.clearApplicationUserData()</a> - A reset button for your app. Perhaps the easiest way to log out a user, ever.</p>

<p><a href="http://developer.android.com/reference/android/content/Context.html#createConfigurationContext(android.content.res.Configuration)">Context.createConfigurationContext()</a> - Customize your configuration context. Common problem I&rsquo;ve run into: forcing part of an app to render in a particular locale (not that I normally condone this sort of behavior, but you never know). This would make it a lot easier to do so.</p>

<p><a href="http://developer.android.com/reference/android/app/ActivityOptions.html">ActivityOptions</a> - Nice custom animations when moving between Activities. ActivityOptionsCompat is good for backwards compatible functionality.</p>

<p><a href="http://developer.android.com/reference/android/widget/AdapterViewFlipper.html#fyiWillBeAdvancedByHostKThx%28%29">AdapterViewFlipper.fyiWillBeAdvancedByHostKThx()</a> - Because it&rsquo;s funny and for no other reason. There are other amusing tidbits in AOSP (like GRAVITY_DEATH_STAR_I) but unlike those this one is actually useful.</p>

<p><a href="http://developer.android.com/reference/android/view/ViewParent.html#requestDisallowInterceptTouchEvent%28boolean%29">ViewParent.requestDisallowInterceptTouchEvent()</a> - The Android touch event system defaults handle what you want most of the time, but sometimes you need this method to wrest event control from parents. (By the way, if you want to know about the touch system, this talk is amazing.)</p>
]]></content>
  </entry>
  
</feed>
